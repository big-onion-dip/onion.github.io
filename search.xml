<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机系统结构笔记-第三章</title>
      <link href="/onion.github.io/2024/10/3466af3489c0.html"/>
      <url>/onion.github.io/2024/10/3466af3489c0.html</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-存储、中断、总线与I-O系统"><a href="#第三章-存储、中断、总线与I-O系统" class="headerlink" title="第三章 存储、中断、总线与I&#x2F;O系统"></a>第三章 存储、中断、总线与I&#x2F;O系统</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><ol><li>对存储系统的基本要求是大容量、高速度、低价格；</li><li>存储器容量SM&#x3D;W×I×m</li></ol><ul><li><strong>W</strong>：存储体的字长，通常以位（bit）或字节（byte）为单位。字长表示一次可以存储的数据量。</li><li><strong>I</strong>：存储体的字数，指存储器中可以存储的字的数量。</li><li><strong>m</strong>：并行工作的存储体数，表示有多少个存储单元同时工作。</li></ul><ol start="3"><li>单体的Bm &#x3D; W&#x2F;TM，m个存储并行的最大频宽Bm &#x3D; W*m&#x2F;TM.TM存取时间，表示访问存储体徐奥的时间</li></ol><p>能并行读出多个CPU字的单体多字和多体单子、多体多字的交叉访问主存系统被成为并行主存系统。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><ol><li>CPU终止正在执行的程序，转去处理uiji提出的请求，当处理完后，再回到原先被打断的程序继续恢复执行的过程称为终端。</li><li>相应和处理各种中断的软硬件总体称为中断系统。</li><li>在计算机中，中断可分为内部终端，外部中断和软件中断三部分。<ol><li>内部中断由CPU内的异常引起；</li><li>外部中断由中断信号引起；</li><li>软件中断由自陷指令引起，用于供操作系统服务；</li><li>外部中断又分为可屏蔽中断和不可屏蔽中断。</li></ol></li><li>中断的分类、分级和相应：<ol><li>引起中断的各个事件称为中断源；</li><li>中断源向中断系统发出请求中断的申请，成为中断请求。同时可能有多个中断请求，中断系统需事先按确定的中断相应优先次序，对优先级高的中断请求予以响应。</li><li>程序性中断是包括指令和数据的格式错误，程序执行中出现异常以及程序的事件记录，监督程序对事件的检测引起的中断等。</li><li>外部中断来自计算机外部，它包括各种定时器中断、外部信号中断以及中断键中断。各种定时器中断用于计时、计费、控制等；外部信号中断主要用于和其他计算机和系统的联系；中断键则用英语操作员对计算机的干预。这些外部中断又可分为两类：一类是若未被响应，则继续保留；另一类为不响应，则不再保留。</li><li>中断的响应次序是在同时发生多个不同中断嘞的中断请求时，中断响应硬件中排队器所决定的响应次序（中断响应的次序用排队器硬件实现，次序是由高到低固定的）。</li></ol></li></ol><p>中断系统的功能包括：中断请求的保存和清除、优先级的确定、中断断电及现场的保存、对中断请求的分析和处理以及中断返回等。中断系统主要是有高的中断响应速度，即从发出中断请求到进入中断处理程序的中断响应时间要短；其次是中断处理的灵活性。因此，中断系统的软、硬件功能分配实质上是中断处理程序软件和中断响应硬件的功能分配。</p><h2 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h2><h3 id="总线的相关概念"><a href="#总线的相关概念" class="headerlink" title="总线的相关概念"></a>总线的相关概念</h3><p>总线：就是用于互连计算机、CPU、存储器、I&#x2F;O接口以及外围设备、远程通信设备间信息传送通路的集合。<br>总线与其相配合的附属控制电路统称为总线系统。按信息传送功能、性能的不同，有数据线，地址线，命令，时序和中断信号等控制&#x2F;状态线及备用线等。</p><ol><li>总线按在系统中的位置分芯片级、板级和系统级等三级。</li><li>就总线允许信息传送的方向来说，可以有单向传输和双向传输两种。</li><li>总线按用法可分为专用和非专用两类。</li><li>总线的标准一般包括机械、功能、电气及过程4个方面的标准。</li><li>总线的通信技术在总线的传递方向上基本分为同步和异步两部分。</li></ol><p>同步通信部件内的信息传送由定宽、定距的系统时钟同步。信息的传送速率高，受总线长度的影响小，时钟在总线上的时滞可能会造成同步误差，时钟线上的干扰信号易引起误同步。<br>异步通信由于I&#x2F;O总线一般是为有不同速度的许多I&#x2F;O设备所共享，因此宜于采用异步通信。<br>异步通信又分为单向源控制和请求&#x2F;回答双向控制。<br>    数据通信宽度是数据总线的物理宽度，即一个时钟周期所传送的信息量。<br>    数据宽度有单字、定长块、可变长块、单字加定长块和单字加可变长块等之分。<br>    总线的控制方式分为集中式控制、分布式控制，其中集中式控制主要有串行连接、定时查询和独立请求三种方式。</p><h3 id="I-O系统"><a href="#I-O系统" class="headerlink" title="I&#x2F;O系统"></a>I&#x2F;O系统</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ol><li>I&#x2F;O系统包括输入&#x2F;输出设备、设备控制器与输入输出操作有关的软、硬件。</li><li>输入输出系统的发展经历了三个阶段，相对应三个方式。即陈旭 控制I&#x2F;O(包括全软件的、程序查询的、中断驱动的)、直接存储器访问及I&#x2F;O处理机方式。</li><li>对于I&#x2F;O处理机方式，又有通道方式和外围处理机方式之分。</li><li>输入输出设备分外存和传输设备两大类。外存有磁盘、磁带、光盘等。传输设备有键盘和鼠标。</li></ol><p>通道处理机的工作原理和流量设计。根据通道数据传输期中信息传送方式的不同，可分为字节多路、数组多路、选择 三类通道。</p><ol><li>字节多路通道：适用于连接大量的像光电机等字符类低速设备。它们传送一个字符（字节）的时间很短，但字符（字节）间的等待时间很长。因此，通道数据宽度为单字节，以字节交叉方式轮流为多台低速设备服务，使效率提高。</li><li>数组多路通道适合于连接多台磁带等高速设备，&#x3D;。这些设备的传送速率很高，但传送开始前的寻址辅助操作时间很长。</li><li>选择通道适合于连接优先级高的磁盘等高速设备，让它独占通道，只能执行一道通道程序。数据传送以补丁长块方式进行，相当于数据宽度为可变长块，一次对N个字节全部传送完。所以，在数据传送期内只选择一次设备。</li></ol><p>应用计算：通道处理机的工作原理和流量设计。<br>通道流量是通道在数据传送期内，单位时间内传送的字节数。它能达到的最大流量称通道极限流量。通道的极限流量与其工作方式、数据传送期内选择一次设备的时间Ts、和传送一个字节的时间Td的长短有关。字节多路通道每选择一台设备只传送一个字节，其通道极限流量：fmax.byte &#x3D; 1&#x2F;(Ts+Td)。<br>数组多路通道：每选择一台设备可传送K个字节，传送N个字节，需要N&#x2F;K次传送，每次传送都要选择一次设备，通道极限流量为：fmax.block &#x3D; K&#x2F;(Ts+KTd)<br>选择通道每选择一台设备就把N个字节全部传送完，通道极限流量 fmax.select &#x3D; N&#x2F;(Ts+NTd)</p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机相关资源</title>
      <link href="/onion.github.io/2024/10/a3f922408924.html"/>
      <url>/onion.github.io/2024/10/a3f922408924.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.heycode.com/">编程日记 (heycode.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>奇思妙想</title>
      <link href="/onion.github.io/2024/10/20c7e7e2260f.html"/>
      <url>/onion.github.io/2024/10/20c7e7e2260f.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用爬虫将当前热门博客标题进行一个收集，统计相同内容不同热度的标题格式，可以用来制作爆款文章"><a href="#使用爬虫将当前热门博客标题进行一个收集，统计相同内容不同热度的标题格式，可以用来制作爆款文章" class="headerlink" title="使用爬虫将当前热门博客标题进行一个收集，统计相同内容不同热度的标题格式，可以用来制作爆款文章"></a>使用爬虫将当前热门博客标题进行一个收集，统计相同内容不同热度的标题格式，可以用来制作爆款文章</h1>]]></content>
      
      
      <categories>
          
          <category> 奇思妙想 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机系统结构笔记-第二章</title>
      <link href="/onion.github.io/2024/10/d43469e1d2a7.html"/>
      <url>/onion.github.io/2024/10/d43469e1d2a7.html</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-数据表示、寻址方式与指令系统"><a href="#第二章-数据表示、寻址方式与指令系统" class="headerlink" title="第二章 数据表示、寻址方式与指令系统"></a>第二章 数据表示、寻址方式与指令系统</h1><h2 id="第一节-数据表示"><a href="#第一节-数据表示" class="headerlink" title="第一节 数据表示"></a>第一节 数据表示</h2><h3 id="1-1-数据表示与数据结构"><a href="#1-1-数据表示与数据结构" class="headerlink" title="1.1 数据表示与数据结构"></a>1.1 数据表示与数据结构</h3><p>数据表示：计算机硬件识别、指令集可直接引用的数据类型；<br>数据结构：由软件进行处理和实现的各种数据类型；</p><p>关系：不同的数据表示可以为数据结构的实现提供不同的支持。实际是软、硬件的取舍。</p><h3 id="1-2-高级数据表示"><a href="#1-2-高级数据表示" class="headerlink" title="1.2 高级数据表示"></a>1.2 高级数据表示</h3><h4 id="自定义数据表示"><a href="#自定义数据表示" class="headerlink" title="自定义数据表示"></a>自定义数据表示</h4><h5 id="标志符数据表示（每条指令对一条数据）"><a href="#标志符数据表示（每条指令对一条数据）" class="headerlink" title="标志符数据表示（每条指令对一条数据）"></a>标志符数据表示（每条指令对一条数据）</h5><ul><li><p><strong>主要优点</strong>：</p><ul><li>简化了指令系统和程序设计。</li><li>简化了编译程序。</li><li>便于实现一致性校验。</li><li>能由软件自动转换数据类型。</li><li>支持数据库系统的实现与数据类型无关的要求。</li><li>为软件调试和应用软件开发提供支持。</li></ul></li><li><p><strong>主要缺点</strong>：</p><ul><li>每个数据字因增设标识符而增加程序所占用的主存空间。</li><li>使用标识符会降低指令的执行速度。</li></ul></li></ul><h5 id="数据描述符（每条指令对多条数据）"><a href="#数据描述符（每条指令对多条数据）" class="headerlink" title="数据描述符（每条指令对多条数据）"></a>数据描述符（每条指令对多条数据）</h5><ul><li><strong>差别</strong>：<ul><li><strong>标志符</strong>：与每个数据连接，存储在同一单元中，描述单个数据的类型特征。</li><li><strong>数据描述符</strong>：与数据分开存放，描述要访问的数据是整块的还是单个的，包括访问该数据块或数据元素所需的地址及其他信息。</li></ul></li></ul><h4 id="向量、数组数据表示"><a href="#向量、数组数据表示" class="headerlink" title="向量、数组数据表示"></a>向量、数组数据表示</h4><ul><li><strong>优点</strong>：<ul><li>节省大量存储空间。</li><li>不必处理零元素，节省处理时间。</li></ul></li></ul><h4 id="堆栈数据表示"><a href="#堆栈数据表示" class="headerlink" title="堆栈数据表示"></a>堆栈数据表示</h4><ul><li><strong>特性</strong>：<ul><li>在编译和子程序调用中非常有用。</li><li>由高速寄存器组成的硬件堆栈，与主存中的堆栈在逻辑上构成整体，访问速度与寄存器相同，容量与主存相当。</li><li>提供丰富的堆栈操作指令，功能强大，可直接对堆栈中的数据进行各种运算和处理。</li><li>有力支持高级语言程序的编译。</li><li>有力支持子程序的嵌套和递归调用。</li></ul></li></ul><h3 id="1-3-引入数据表示的原则"><a href="#1-3-引入数据表示的原则" class="headerlink" title="1.3 引入数据表示的原则"></a>1.3 引入数据表示的原则</h3><ol><li>看系统的效率是否显著提高，包括实现时间和存储空间是否显著减少。主存和处理机之间传送的信息量越少，实现时间就越少。</li><li>看引入这种数据表示后，其通过性和利用率是否显著提高。</li></ol><h3 id="1-4-浮点数位数基质大小和下溢处理方法的选择"><a href="#1-4-浮点数位数基质大小和下溢处理方法的选择" class="headerlink" title="1.4 浮点数位数基质大小和下溢处理方法的选择"></a>1.4 浮点数位数基质大小和下溢处理方法的选择</h3><p>有点难理解，可查看：<br><a href="https://blog.csdn.net/baidu_33836580/article/details/134177839?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522D99AC1ED-83AB-4C9A-8174-3D6BD6BB2344%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=D99AC1ED-83AB-4C9A-8174-3D6BD6BB2344&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-6-134177839-null-null.nonecase&utm_term=%E6%B5%AE%E7%82%B9%E6%95%B0&spm=1018.2226.3001.4450">定点数和浮点数（一）_q8.8定点数-CSDN博客</a><br>浮点数由尾数M和阶码E构成。基数为2的数F的浮点数表示为：<br><img src="/onion.github.io/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20241019150537642.jpg">浮点数位数基质 Rm 的选择</p><ol><li><strong>可表示数的范围</strong>：随着 Rm 的增大，表示的数值范围也增大。</li><li><strong>可表示数的个数</strong>：随着 Rm 的增大，可表示的数目也随之增加。</li><li><strong>数在数轴上的分布</strong>：随着 Rm 的增大，数在数轴上的密度变得更稀疏。</li><li><strong>可表示数的精度</strong>：随着 Rm 的增大，精度单调下降。</li><li><strong>运算中的精度损失</strong>：随着 Rm 的增大，精度损失逐渐减小。</li><li><strong>运算速度</strong>：随着 Rm 的增大，运算速度可以提高。</li></ol><h5 id="浮点数尾数的下溢处理办法"><a href="#浮点数尾数的下溢处理办法" class="headerlink" title="浮点数尾数的下溢处理办法"></a>浮点数尾数的下溢处理办法</h5><ol><li><p><strong>截断法</strong>：</p><ul><li><strong>特点</strong>：简单实现，不增加硬件和处理时间，但误差累积且无法调节，使用较少。</li></ul></li><li><p><strong>舍入法</strong>：</p><ul><li><strong>特点</strong>：增设附加位存放溢出最高位，每次尾数下溢处理时附加位加1。简单实现，硬件需求少，误差小，但处理速度较慢，常用于中低速计算机。</li></ul></li><li><p><strong>恒置‘1’法</strong>：</p><ul><li><strong>特点</strong>：将计算机规定字长的最低位恒置为1。实现简单，不增加硬件和处理时间，平均误差趋于0，但最大误差较大，常用于中高速计算机。</li></ul></li><li><p><strong>查表舍入法</strong>：</p><ul><li><strong>特点</strong>：使用ROM或PLA存放下溢处理表。速度快，平均误差可调节为0，但硬件需求较大，应用广泛。</li></ul></li></ol><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>在计算机组成设计中，必须妥善处理数的下溢问题。由于这种精度损失对系统程序和应用程序设计者是透明的，若设计不当，同样的问题在不同下溢处理方法的计算机上可能会产生不同的运算结果。</p><p>下溢处理方法的选择需要综合考虑速度、误差、硬件开销及实现的便利性等多方面因素。</p><h2 id="第二节-寻址方式"><a href="#第二节-寻址方式" class="headerlink" title="第二节 寻址方式"></a>第二节 寻址方式</h2><p>寻址方式Addressing mode是指一种指令集结构如何确定要访问的数据的地址。</p><h3 id="2-1-寻址方式的三种面向"><a href="#2-1-寻址方式的三种面向" class="headerlink" title="2.1 寻址方式的三种面向"></a>2.1 寻址方式的三种面向</h3><ol><li>面向寄存器：保存在寄存器，少量送入主存。</li><li>面向堆栈：主要访问堆栈，少量访问主存或寄存器。</li><li>面向主存：主要访问主存，少量访问寄存器。</li></ol><h3 id="2-2-寻址方式在指令中的指明"><a href="#2-2-寻址方式在指令中的指明" class="headerlink" title="2.2 寻址方式在指令中的指明"></a>2.2 寻址方式在指令中的指明</h3><ol><li>占用操作码中的某些位来指明。</li><li>不占用操作码，而是在地址码部分专门设置寻址方式位字段指明。</li></ol><h3 id="2-3-程序在主存中的定位技术"><a href="#2-3-程序在主存中的定位技术" class="headerlink" title="2.3 程序在主存中的定位技术"></a>2.3 程序在主存中的定位技术</h3><p>逻辑地址：程序员编程用的地址；<br>物理地址：程序在主存中的实际地址；</p><ol><li>静态再定位：目标程序装入主存，用软件将逻辑地址变换为物理地址。</li><li>动态再定位：指令不修改，通过基址寻址法解决。（越界判断：逻辑空间小于实存空间）</li><li>虚实地址映像表：查表获得（虚拟页式存储器）</li></ol><h3 id="2-4-物理主存中信息的存储分布"><a href="#2-4-物理主存中信息的存储分布" class="headerlink" title="2.4 物理主存中信息的存储分布"></a>2.4 物理主存中信息的存储分布</h3><ul><li><p><strong>地址对齐</strong>：信息在主存中的存放地址必须是信息宽度的整数倍。例如，如果信息宽度为4字节（32位），则有效的存储地址应为0、4、8、12等地址。</p></li><li><p><strong>跨边界存放问题</strong>：如果信息存放在不满足对齐要求的地址，则可能发生信息跨越主存的边界。这意味着在读取或写入数据时，可能需要多个存储周期，从而导致性能下降。</p></li><li><p><strong>错误访问</strong>：对于不符合对齐要求的地址，系统将认为地址有误，并拒绝访问。这种设计确保了数据访问的高效性和准确性。</p></li></ul><h2 id="第三节-指令系统的设计和优化"><a href="#第三节-指令系统的设计和优化" class="headerlink" title="第三节 指令系统的设计和优化"></a>第三节 指令系统的设计和优化</h2><h3 id="3-1-指令系统设计的基本原则"><a href="#3-1-指令系统设计的基本原则" class="headerlink" title="3.1 指令系统设计的基本原则"></a>3.1 指令系统设计的基本原则</h3><p>指令系统是软、硬件的主要界面，它在很大程度上决定了计算机具有的基本功能。</p><h3 id="3-2-指令操作码的优化"><a href="#3-2-指令操作码的优化" class="headerlink" title="3.2 指令操作码的优化"></a>3.2 指令操作码的优化</h3><p>指令是由操作码和地址码两部分组成的。</p><ol><li>指令格式优化：用最短的位数来表示指令的操作信息和地址信息，使程序中指令的平均字长最短。</li><li>操作码优化：缩短指令字长，减少程序总位数，增加指令字能表示的操作信息和地址信息。</li><li>拓展码优化：缩短指令字长，减少程序总位数，增加指令字能表示的操作信息和地址信息。拓展操作码也必须遵守短码不能是长码的前缀的原则。</li></ol><h3 id="3-1-指令字格式的优化"><a href="#3-1-指令字格式的优化" class="headerlink" title="3.1 指令字格式的优化"></a>3.1 指令字格式的优化</h3><p>措施：</p><ol><li>采用拓展操作码。并根据指令的频度Pi的分布情况选择合适的编码方式，以缩短操作码的平均长度。</li><li>采用多种寻址方式，以缩短地址码的长度，并在有限的地址长度内提供更多的地址信息。</li><li>采用多种地址制，以增加指令的功能，这样从宏观上就能缩短程序的长度，并加快程序的执行速度。</li><li>在同种地址制内再采用多种地址形式，让每种地址字段可以有多种长度，且让长操作码与短地址码进行组配。</li><li>在维持指令字在存储器中按整数边界存储的前提下，使用多种不同的指令字长度。</li></ol><h2 id="第四节-指令系统的发展和改进"><a href="#第四节-指令系统的发展和改进" class="headerlink" title="第四节 指令系统的发展和改进"></a>第四节 指令系统的发展和改进</h2><h3 id="4-1-CISC和RISC"><a href="#4-1-CISC和RISC" class="headerlink" title="4.1 CISC和RISC"></a>4.1 CISC和RISC</h3><p>CISC：复杂指令集计算机；<br>RISC：精简指令系统计算机；</p><h3 id="4-2-按CISC方向发展和改进指令系统"><a href="#4-2-按CISC方向发展和改进指令系统" class="headerlink" title="4.2 按CISC方向发展和改进指令系统"></a>4.2 按CISC方向发展和改进指令系统</h3><ol><li><strong>面向目标程序的优化实现改进</strong><ol><li>通过对大量已有机器的机器语言及执行情况，统计各种指令和指令串的使用频率加以分析和改进。</li><li>增设强功能符合指令来取代原先由常用宏指令或子程序实现的功能，由微程序解释实现。</li></ol></li><li><strong>面向高级语言的优化实现改进</strong><ol><li>通过对源程序中各种高级语言语句的使用频率进行统计来分析改进。</li><li>如何面对编译，优化代码生成来改进。</li><li>改进指令系统，使它与各种语言间的语义差异都有同等的缩小。</li><li>采用让计算机具有分别面对各种高级语言的多种指令系统、多种系统结构的面向问题动态自寻优的计算机系统。</li><li>发展高级语言计算机。（直接执行&#x2F;通过汇编语言间接执行）</li></ol></li><li><strong>面对OS的优化实现改进</strong><ol><li>通过对OS中常用指令和指令串的使用频度进行统计分析来改进。</li><li>考虑如何增设专用于OS的新指令。</li><li>把OS中频繁使用、对速度影响大的机构型软件子系统硬化或固化，改为直接用硬件或微程序解释实现。</li><li>发展让OS由专门的处理机来执行的功能分布处理系统结构。</li></ol></li></ol><h3 id="4-3-按-RISC方向发展和改进指令系统"><a href="#4-3-按-RISC方向发展和改进指令系统" class="headerlink" title="4.3 按 RISC方向发展和改进指令系统"></a>4.3 按 RISC方向发展和改进指令系统</h3><ol><li>CISC 的问题<ol><li>指令系统庞大，200 条以上。</li><li>许多指令系统的操作繁杂，执行速度很低。</li><li>编译程序难以优化生成高效机器语言程序。</li><li>许多指令使用频率很低。</li></ol></li><li>设计 RISC 的基本原则<ol><li>确定指令系统时，只选择使用频度很高的那些指令，在此基础上增加少量能有效支持 OS、高级语言实现及其他功能的指令,大大减少指令条数,一般不超过 100 条。</li><li>减少指令系统所用寻址方式种类，一般不超过两种。</li><li>让所有指令都在一个机器周期完成。</li><li>扩大通用寄存器数,一般不少于 32个,尽量减少访存,所有指令只有存(STORE)取(LOAD)指令访存，其他指令一律只对寄存器操作。</li><li>为了提高指令执行速度，大多数指令都用硬联控制是西安，少数指令才用微程序实现。</li><li>通过精简指令和优化设计编译程序，简单、有效地支持高级语言的实现。</li></ol></li><li>设计RISC结构采用的基本技术<ol><li>按照设计RISC的一般原则来设计；</li><li>逻辑实现采用硬联和微程序相结合；</li><li>在CPU中设置大量工作寄存器并采用重叠寄存器窗口（设计RISC结构的重叠寄存器并采用重叠寄存器窗口技术：采用让相邻过程的低区和高区公用同一组物理寄存器的重叠技术，可实现这两个过程直接交换参数，显著地减少过程调用和返回的执行时间、执行命令的条数和访存次数）</li><li>指令用流水和延迟转移。</li><li>采用高级缓冲存储器Cache，设置指令Cache和数据Cache分别存放指令和数据。</li><li>优化设计编译系统。</li></ol></li><li>RISC技术的发展<ol><li>简化指令系统设计，适合VLSI实现。</li><li>提高计算机的执行速度和效率。</li><li>降低设计成本，提高系统的可靠性。</li><li>可直接支持高级语言的实现，简化编译程序的设计。</li></ol></li><li>RISC存在的问题：<ol><li>由于指令少，使原来在CISC上由单一指令完成的某些复杂功能现在要用多条RISC指令才能完成，加重了汇编语言程序设计的负担，增加了机器语言程序的长度，占用存储空间多，加大指令的信息流量。</li><li>对浮点运算的执行和虚拟存储器的支持仍显不足。</li><li>RISC计算器的编译程序比CISC的难写。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机相关课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机系统结构 </tag>
            
            <tag> 计算机科学与技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实时温湿度监测系统：Micropython编码ESP32与DHT22模块的无线数据传输与PC端接收项目</title>
      <link href="/onion.github.io/2024/10/fd3c3e247cd9.html"/>
      <url>/onion.github.io/2024/10/fd3c3e247cd9.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>人生苦短，我用Python。</p><p>由于我在日常工作中经常使用Python，因此在进行该项目时，我首先考虑使用Python进行实现。在搜索电路板编程相关内容时，我发现Micropython是一个非常好的选择，因为它使用简单的语法能够帮助新手快速掌握。因此，我决定使用Micropython来实现该项目。<br><img src="/onion.github.io/images/%E7%94%B5%E8%B7%AF%E6%9D%BF_%E5%AE%9E%E6%97%B6%E6%B8%A9%E6%B9%BF%E5%BA%A6%E7%9B%91%E6%B5%8B%E7%B3%BB%E7%BB%9F%EF%BC%9Amicropython%E7%BC%96%E7%A0%81esp32%E4%B8%8Edht22%E6%A8%A1%E5%9D%97%E7%9A%84%E6%97%A0%E7%BA%BF%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E4%B8%8Epc%E7%AB%AF%E6%8E%A5%E6%94%B6%E9%A1%B9%E7%9B%AE/image-20241018154705217.jpg"></p><h1 id="项目目的"><a href="#项目目的" class="headerlink" title="项目目的"></a>项目目的</h1><p>实时监控房间温度，可以将其用作实时温湿度查看的桌面插件，也可以将其用作温湿度监控装置。</p><p>要求ESP32所处房间需要有可连接的wifi。</p><h1 id="项目材料"><a href="#项目材料" class="headerlink" title="项目材料"></a>项目材料</h1><ol><li>ESP32 wifi 模块</li><li>HDT22 温湿度传感器</li><li>母对母接头（买HDT22会送）</li></ol><h1 id="项目步骤"><a href="#项目步骤" class="headerlink" title="项目步骤"></a>项目步骤</h1><h2 id="模拟ESP32接线连接测试"><a href="#模拟ESP32接线连接测试" class="headerlink" title="模拟ESP32接线连接测试"></a>模拟ESP32接线连接测试</h2><p>可使用我进行模拟的网站进行学习，点击boot.py再点击播放键即可运行：<a href="https://wokwi.com/projects/402382206140589057">“Wokwi测试项目”</a></p><p>这个测试网站可以使用“Wokwi-GUEST”开放式wifi进行测试，实际使用中将wifi改为房间中的wifi和密码即可。<br>并且该项目的两个py文件就是我本地拷录并且运行的代码，代码可以实现持续连接wifi和MQTT的功能，并且有呼吸灯和指示灯（这部分实际连接的时候可以注意到），还有一些数据传输的部分修饰。</p><p><img src="/onion.github.io/images/%E7%94%B5%E8%B7%AF%E6%9D%BF_%E5%AE%9E%E6%97%B6%E6%B8%A9%E6%B9%BF%E5%BA%A6%E7%9B%91%E6%B5%8B%E7%B3%BB%E7%BB%9F%EF%BC%9Amicropython%E7%BC%96%E7%A0%81esp32%E4%B8%8Edht22%E6%A8%A1%E5%9D%97%E7%9A%84%E6%97%A0%E7%BA%BF%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E4%B8%8Epc%E7%AB%AF%E6%8E%A5%E6%94%B6%E9%A1%B9%E7%9B%AE/image-20241018154719701.jpg"></p><p>能够看到当前的结果就是代码可以正常实现将温湿度以及时间数据传输到MQTT公共服务端：<a href="https://www.mqtt-dashboard.com/">MQTT开放端口</a></p><p><img src="/onion.github.io/images/%E7%94%B5%E8%B7%AF%E6%9D%BF_%E5%AE%9E%E6%97%B6%E6%B8%A9%E6%B9%BF%E5%BA%A6%E7%9B%91%E6%B5%8B%E7%B3%BB%E7%BB%9F%EF%BC%9Amicropython%E7%BC%96%E7%A0%81esp32%E4%B8%8Edht22%E6%A8%A1%E5%9D%97%E7%9A%84%E6%97%A0%E7%BA%BF%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E4%B8%8Epc%E7%AB%AF%E6%8E%A5%E6%94%B6%E9%A1%B9%E7%9B%AE/image-20241018154731654.jpg"></p><p>动手实践时可以按照模拟的方式进行实际连接：</p><p><img src="/onion.github.io/images/%E7%94%B5%E8%B7%AF%E6%9D%BF_%E5%AE%9E%E6%97%B6%E6%B8%A9%E6%B9%BF%E5%BA%A6%E7%9B%91%E6%B5%8B%E7%B3%BB%E7%BB%9F%EF%BC%9Amicropython%E7%BC%96%E7%A0%81esp32%E4%B8%8Edht22%E6%A8%A1%E5%9D%97%E7%9A%84%E6%97%A0%E7%BA%BF%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E4%B8%8Epc%E7%AB%AF%E6%8E%A5%E6%94%B6%E9%A1%B9%E7%9B%AE/image-20241018154739266.jpg"></p><h2 id="搭建PC端ESP32拷录环境"><a href="#搭建PC端ESP32拷录环境" class="headerlink" title="搭建PC端ESP32拷录环境"></a>搭建PC端ESP32拷录环境</h2><p>安装tonny并且快速入门可看这个前几集和课件。<br>【Python+ESP32 快速上手（持续更新中）【 通俗易懂 】】 <a href="https://www.bilibili.com/video/BV1G34y1E7tE/?share_source=copy_web&vd_source=0d6fb1bf666097a8d32dc1f77cf20826">https://www.bilibili.com/video/BV1G34y1E7tE/?share_source=copy_web&amp;vd_source=0d6fb1bf666097a8d32dc1f77cf20826</a></p><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=811712795&bvid=BV1G34y1E7tE&cid=1244266639&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><p>注意事项：</p><ol><li>安装驱动之后连接ESP32到电脑可能不显示端口COM，可能是使用的数据线类型过旧，尽量更换数据线进行使用；</li><li>Tonny运行的时候可能出现未连接情况，只需要点击重启后端，或者拔出等几秒重新插入即可。</li></ol><p><img src="/onion.github.io/images/%E7%94%B5%E8%B7%AF%E6%9D%BF_%E5%AE%9E%E6%97%B6%E6%B8%A9%E6%B9%BF%E5%BA%A6%E7%9B%91%E6%B5%8B%E7%B3%BB%E7%BB%9F%EF%BC%9Amicropython%E7%BC%96%E7%A0%81esp32%E4%B8%8Edht22%E6%A8%A1%E5%9D%97%E7%9A%84%E6%97%A0%E7%BA%BF%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E4%B8%8Epc%E7%AB%AF%E6%8E%A5%E6%94%B6%E9%A1%B9%E7%9B%AE/image-20241018154749719.jpg"></p><h2 id="对ESP32进行拷录"><a href="#对ESP32进行拷录" class="headerlink" title="对ESP32进行拷录"></a>对ESP32进行拷录</h2><ol><li>将模拟网站上的两个代码拷贝下来，修改TOPIC(尽量是唯一的，因为是公共端口，同时记得修改本地接收代码里面的信息）以及wifi部分，上传至ESP32中；</li><li>正确连接HDT22和ESP32；</li><li>给ESP32进行供电，当连接之后蓝灯闪烁就是在上传实时温湿度，蓝灯常亮就是MQTT端口暂时端口，蓝灯不亮就是wifi也没连上；</li></ol><h2 id="PC端搭建桌面组件"><a href="#PC端搭建桌面组件" class="headerlink" title="PC端搭建桌面组件"></a>PC端搭建桌面组件</h2><p>这部分是主要使用MQTTpython包进行本地数据接收以及tkinter创建桌面组件实现实时展示并且可以绘制折线图。</p><h3 id="本地数据接收"><a href="#本地数据接收" class="headerlink" title="本地数据接收"></a>本地数据接收</h3><p>MQTT本地包进行实时数据接收，保存到当前目录下的data.txt，可以自行修改，同时记得修改桌面组件读取路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paho.mqtt.client <span class="keyword">as</span> mqtt</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当收到连接时的回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_connect</span>(<span class="params">client, userdata, flags, rc</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Connected with result code &quot;</span> + <span class="built_in">str</span>(rc))</span><br><span class="line">    <span class="comment"># 订阅主题</span></span><br><span class="line">    client.subscribe(topic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当接收到消息时的回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">client, userdata, msg</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Received message: &quot;</span> + msg.payload.decode())</span><br><span class="line">    <span class="built_in">dict</span> = json.loads(msg.payload.decode())</span><br><span class="line">    <span class="comment"># 将消息保存到文件、数据库等</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(<span class="string">&#x27;\t&#x27;</span>.join([<span class="built_in">dict</span>[<span class="string">&quot;time&quot;</span>].replace(<span class="string">&quot;_&quot;</span>,<span class="string">&quot; &quot;</span>),<span class="built_in">str</span>(<span class="built_in">dict</span>[<span class="string">&quot;temp&quot;</span>]),<span class="built_in">str</span>(<span class="built_in">dict</span>[<span class="string">&quot;humidity&quot;</span>])])+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># MQTT Broker的连接参数</span></span><br><span class="line">broker = <span class="string">&quot;broker.hivemq.com&quot;</span></span><br><span class="line">port = <span class="number">1883</span>  <span class="comment"># 端口号</span></span><br><span class="line">topic = <span class="string">&quot;wokwi-weather&quot;</span>  <span class="comment"># 订阅的主题，记得修改这里</span></span><br><span class="line"><span class="comment"># 创建一个MQTT客户端</span></span><br><span class="line">client = mqtt.Client()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置回调函数</span></span><br><span class="line">client.on_connect = on_connect</span><br><span class="line">client.on_message = on_message</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到MQTT Broker</span></span><br><span class="line">client.connect(broker, port, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始循环，处理网络流量和调用回调函数</span></span><br><span class="line">client.loop_forever()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="桌面小组件部分"><a href="#桌面小组件部分" class="headerlink" title="桌面小组件部分"></a>桌面小组件部分</h3><p>还在不断完善，因为也是刚学tkinter几天没有太掌握。<br><img src="/onion.github.io/images/%E7%94%B5%E8%B7%AF%E6%9D%BF_%E5%AE%9E%E6%97%B6%E6%B8%A9%E6%B9%BF%E5%BA%A6%E7%9B%91%E6%B5%8B%E7%B3%BB%E7%BB%9F%EF%BC%9Amicropython%E7%BC%96%E7%A0%81esp32%E4%B8%8Edht22%E6%A8%A1%E5%9D%97%E7%9A%84%E6%97%A0%E7%BA%BF%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E4%B8%8Epc%E7%AB%AF%E6%8E%A5%E6%94%B6%E9%A1%B9%E7%9B%AE/image-20241018154800180.jpg"></p><p>暂时可以实现实时读取data数据最后并读取全部数据绘制折线图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> ttk</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageTk</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.backends.backend_tkagg <span class="keyword">import</span> FigureCanvasTkAgg</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">line_plot</span>():</span><br><span class="line">    <span class="comment"># Read the data from the file</span></span><br><span class="line">    data = pd.read_csv(<span class="string">&#x27;data.txt&#x27;</span>, sep=<span class="string">&#x27;\t&#x27;</span>, header=<span class="literal">None</span>, names=[<span class="string">&#x27;Timestamp&#x27;</span>, <span class="string">&#x27;Temperature&#x27;</span>, <span class="string">&#x27;Humidity&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Data loaded for plotting.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create the figure with a single subplot</span></span><br><span class="line">    fig, ax = plt.subplots(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plot the temperature</span></span><br><span class="line">    temperature_line, = ax.plot(data[<span class="string">&#x27;Timestamp&#x27;</span>], data[<span class="string">&#x27;Temperature&#x27;</span>], color=<span class="string">&#x27;blue&#x27;</span>, label=<span class="string">&#x27;Temperature&#x27;</span>)</span><br><span class="line">    ax.set_xlabel(<span class="string">&#x27;Timestamp&#x27;</span>)</span><br><span class="line">    ax.set_ylim(<span class="number">20</span>, <span class="number">40</span>)  <span class="comment"># Set the y-axis limits for temperature to 20-40</span></span><br><span class="line">    ax.set_ylabel(<span class="string">&#x27;Temperature (°C)&#x27;</span>, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">    ax.tick_params(<span class="string">&#x27;y&#x27;</span>, colors=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Create a twin y-axis for the humidity</span></span><br><span class="line">    ax2 = ax.twinx()</span><br><span class="line">    humidity_line, = ax2.plot(data[<span class="string">&#x27;Timestamp&#x27;</span>], data[<span class="string">&#x27;Humidity&#x27;</span>], color=<span class="string">&#x27;green&#x27;</span>, label=<span class="string">&#x27;Humidity&#x27;</span>)</span><br><span class="line">    ax2.set_ylabel(<span class="string">&#x27;Humidity (%)&#x27;</span>, color=<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">    ax2.set_ylim(<span class="number">20</span>, <span class="number">80</span>)  <span class="comment"># Set the y-axis limits for humidity to 20-80</span></span><br><span class="line">    ax2.tick_params(<span class="string">&#x27;y&#x27;</span>, colors=<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set the title and grid</span></span><br><span class="line">    ax.set_title(<span class="string">&#x27;Temperature and Humidity over Time&#x27;</span>)</span><br><span class="line">    ax.grid()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add a legend</span></span><br><span class="line">    lines = [temperature_line, humidity_line]</span><br><span class="line">    labels = [l.get_label() <span class="keyword">for</span> l <span class="keyword">in</span> lines]</span><br><span class="line">    ax.legend(lines, labels, loc=<span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Display 20 evenly spaced x-axis labels</span></span><br><span class="line">    num_ticks = <span class="number">20</span></span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    end = <span class="built_in">len</span>(data[<span class="string">&#x27;Timestamp&#x27;</span>])</span><br><span class="line">    tick_locations = [start + i * (end - start) / (num_ticks - <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_ticks)]</span><br><span class="line">    <span class="comment"># def split_timestamp(ts):</span></span><br><span class="line">    <span class="comment">#     return &quot;-&quot;.join(&quot;:&quot;.join(ts.split(&quot;:&quot;)[:-1]).split(&quot;-&quot;)[:])</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># tick_locations = tick_locations.apply(split_timestamp)</span></span><br><span class="line">    tick_locations = [<span class="built_in">int</span>(loc) <span class="keyword">for</span> loc <span class="keyword">in</span> tick_locations]</span><br><span class="line">    ax.set_xticks(tick_locations)</span><br><span class="line">    plt.setp(ax.get_xticklabels(), rotation=<span class="number">30</span>)</span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    <span class="comment"># Display the plot</span></span><br><span class="line">    <span class="keyword">return</span> fig</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AutoHideWindow</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root = root</span><br><span class="line">        <span class="variable language_">self</span>.root.geometry(<span class="string">&quot;320x130-100+100&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.root.overrideredirect(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.root.wm_attributes(<span class="string">&quot;-topmost&quot;</span>, <span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.root.wm_attributes(<span class="string">&quot;-alpha&quot;</span>, <span class="number">0.9</span>)</span><br><span class="line">        <span class="variable language_">self</span>.is_hidden = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.screen_width = <span class="variable language_">self</span>.root.winfo_screenwidth()</span><br><span class="line">        <span class="variable language_">self</span>.screen_height = <span class="variable language_">self</span>.root.winfo_screenheight()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.hidden_window = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.line_chart_window = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.line_chart_open = <span class="literal">False</span>  <span class="comment"># Track if the line chart window is open</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_main_interface()</span><br><span class="line">        <span class="variable language_">self</span>.create_line_chart_window()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.root.bind(<span class="string">&quot;&lt;Configure&gt;&quot;</span>, <span class="variable language_">self</span>.check_position)</span><br><span class="line">        <span class="variable language_">self</span>.root.bind(<span class="string">&quot;&lt;Enter&gt;&quot;</span>, <span class="variable language_">self</span>.show_full_window)</span><br><span class="line">        <span class="variable language_">self</span>.root.bind(<span class="string">&quot;&lt;Escape&gt;&quot;</span>, <span class="variable language_">self</span>.hide_window)</span><br><span class="line">        <span class="variable language_">self</span>.root.bind(<span class="string">&quot;&lt;Return&gt;&quot;</span>, <span class="variable language_">self</span>.show_full_window)</span><br><span class="line">        <span class="variable language_">self</span>.root.bind(<span class="string">&quot;&lt;ButtonPress-1&gt;&quot;</span>, <span class="variable language_">self</span>.start_move)</span><br><span class="line">        <span class="variable language_">self</span>.root.bind(<span class="string">&quot;&lt;B1-Motion&gt;&quot;</span>, <span class="variable language_">self</span>.on_move)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.x_offset = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.y_offset = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.update_data()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_main_interface</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.main_frame = ttk.Frame(<span class="variable language_">self</span>.root)</span><br><span class="line">        <span class="variable language_">self</span>.main_frame.pack(fill=tk.BOTH, expand=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.gif_label = tk.Label(<span class="variable language_">self</span>.main_frame)</span><br><span class="line">        <span class="variable language_">self</span>.gif_label.grid(row=<span class="number">0</span>, column=<span class="number">1</span>, rowspan=<span class="number">4</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>, sticky=tk.W)</span><br><span class="line">        <span class="variable language_">self</span>.load_gif(<span class="string">&quot;功德加一+(1).gif&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.numbers_label = ttk.Frame(<span class="variable language_">self</span>.main_frame)</span><br><span class="line">        <span class="variable language_">self</span>.numbers_label.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, rowspan=<span class="number">3</span>, padx=<span class="number">10</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.number0_label = tk.Label(<span class="variable language_">self</span>.numbers_label, width=<span class="number">20</span>, height=<span class="number">1</span>, bg=<span class="string">&#x27;green&#x27;</span>, fg=<span class="string">&#x27;white&#x27;</span>, font=<span class="string">&quot;Arial 10 bold&quot;</span>, text=<span class="string">&quot; &quot;</span>, relief=tk.FLAT, anchor=tk.W)</span><br><span class="line">        <span class="variable language_">self</span>.number0_label.grid(column=<span class="number">0</span>, row=<span class="number">0</span>, sticky=tk.E)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.number1_label = tk.Label(<span class="variable language_">self</span>.numbers_label, width=<span class="number">20</span>, height=<span class="number">1</span>, bg=<span class="string">&#x27;white&#x27;</span>, fg=<span class="string">&#x27;black&#x27;</span>, font=<span class="string">&quot;Arial 10&quot;</span>, text=<span class="string">&quot;温度：&quot;</span>, relief=tk.FLAT, anchor=tk.W)</span><br><span class="line">        <span class="variable language_">self</span>.number1_label.grid(column=<span class="number">0</span>, row=<span class="number">1</span>, sticky=tk.E, ipady=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.number2_label = tk.Label(<span class="variable language_">self</span>.numbers_label, width=<span class="number">20</span>, height=<span class="number">1</span>, bg=<span class="string">&#x27;white&#x27;</span>, fg=<span class="string">&#x27;black&#x27;</span>, font=<span class="string">&quot;Arial 10&quot;</span>, text=<span class="string">&quot;湿度：&quot;</span>, relief=tk.FLAT, anchor=tk.W)</span><br><span class="line">        <span class="variable language_">self</span>.number2_label.grid(column=<span class="number">0</span>, row=<span class="number">2</span>, sticky=tk.E, ipady=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.button = ttk.Button(<span class="variable language_">self</span>.main_frame, text=<span class="string">&quot;温湿度折线图&quot;</span>, command=<span class="variable language_">self</span>.show_line_chart_window)</span><br><span class="line">        <span class="variable language_">self</span>.button.grid(column=<span class="number">0</span>, row=<span class="number">3</span>, sticky=tk.E)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_gif</span>(<span class="params">self, path</span>):</span><br><span class="line">        <span class="variable language_">self</span>.gif = Image.<span class="built_in">open</span>(path)</span><br><span class="line">        <span class="variable language_">self</span>.gif_frames = []</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="variable language_">self</span>.gif_frames.append(ImageTk.PhotoImage(<span class="variable language_">self</span>.gif.copy()))</span><br><span class="line">                <span class="variable language_">self</span>.gif.seek(<span class="built_in">len</span>(<span class="variable language_">self</span>.gif_frames))</span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.current_frame = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.update_gif()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_gif</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.gif_label.configure(image=<span class="variable language_">self</span>.gif_frames[<span class="variable language_">self</span>.current_frame])</span><br><span class="line">        <span class="variable language_">self</span>.current_frame = (<span class="variable language_">self</span>.current_frame + <span class="number">1</span>) % <span class="built_in">len</span>(<span class="variable language_">self</span>.gif_frames)</span><br><span class="line">        <span class="variable language_">self</span>.root.after(<span class="number">100</span>, <span class="variable language_">self</span>.update_gif)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_line_chart_window</span>(<span class="params">self</span>):</span><br><span class="line">        x, y = <span class="variable language_">self</span>.root.winfo_x(), <span class="variable language_">self</span>.root.winfo_y()</span><br><span class="line">        width, height = <span class="number">10</span>, <span class="variable language_">self</span>.root.winfo_height()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.line_chart_window = tk.Toplevel(<span class="variable language_">self</span>.root)</span><br><span class="line">        <span class="variable language_">self</span>.line_chart_window.geometry(<span class="string">f&quot;320x500+<span class="subst">&#123;x&#125;</span>+<span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.line_chart_window.withdraw()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Bind the close event of the window to a method that resets the open status</span></span><br><span class="line">        <span class="variable language_">self</span>.line_chart_window.protocol(<span class="string">&quot;WM_DELETE_WINDOW&quot;</span>, <span class="variable language_">self</span>.close_line_chart_window)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_position</span>(<span class="params">self, event=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_hidden:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        x, y = <span class="variable language_">self</span>.root.winfo_x(), <span class="variable language_">self</span>.root.winfo_y()</span><br><span class="line">        width, height = <span class="variable language_">self</span>.root.winfo_width(), <span class="variable language_">self</span>.root.winfo_height()</span><br><span class="line">        <span class="keyword">if</span> x &lt;= <span class="number">0</span> <span class="keyword">or</span> x + width &gt;= <span class="variable language_">self</span>.screen_width:</span><br><span class="line">            <span class="variable language_">self</span>.hide_window()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hide_window</span>(<span class="params">self, event=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.hidden_window <span class="keyword">or</span> <span class="variable language_">self</span>.is_hidden:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        x, y = <span class="variable language_">self</span>.root.winfo_x(), <span class="variable language_">self</span>.root.winfo_y()</span><br><span class="line">        width, height = <span class="number">10</span>, <span class="variable language_">self</span>.root.winfo_height()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.hidden_window = tk.Toplevel(<span class="variable language_">self</span>.root)</span><br><span class="line">        <span class="variable language_">self</span>.hidden_window.geometry(<span class="string">f&quot;<span class="subst">&#123;width&#125;</span>x<span class="subst">&#123;height&#125;</span>+<span class="subst">&#123;x&#125;</span>+<span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.hidden_window.overrideredirect(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.hidden_window.bind(<span class="string">&quot;&lt;Enter&gt;&quot;</span>, <span class="variable language_">self</span>.show_full_window)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_full_window</span>(<span class="params">self, event=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.hidden_window:</span><br><span class="line">            <span class="variable language_">self</span>.hidden_window.destroy()</span><br><span class="line">            <span class="variable language_">self</span>.hidden_window = <span class="literal">None</span></span><br><span class="line">            <span class="variable language_">self</span>.root.deiconify()</span><br><span class="line">            <span class="variable language_">self</span>.is_hidden = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_line_chart_window</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.line_chart_open:</span><br><span class="line">            <span class="variable language_">self</span>.line_chart_window.deiconify()  <span class="comment"># Show existing window</span></span><br><span class="line">            <span class="variable language_">self</span>.create_line_chart(<span class="variable language_">self</span>.line_chart_window)  <span class="comment"># Redraw the chart</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.create_line_chart(<span class="variable language_">self</span>.line_chart_window)</span><br><span class="line">            <span class="variable language_">self</span>.line_chart_window.deiconify()</span><br><span class="line">            <span class="variable language_">self</span>.line_chart_open = <span class="literal">True</span>  <span class="comment"># Update the open status</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_line_chart_window</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.line_chart_open:</span><br><span class="line">            <span class="variable language_">self</span>.line_chart_window.withdraw()  <span class="comment"># Hide the window</span></span><br><span class="line">            <span class="variable language_">self</span>.line_chart_open = <span class="literal">False</span>  <span class="comment"># Update the open status</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_move</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="variable language_">self</span>.x_offset = event.x</span><br><span class="line">        <span class="variable language_">self</span>.y_offset = event.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_move</span>(<span class="params">self, event</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.root.winfo_pointerx() - <span class="variable language_">self</span>.x_offset</span><br><span class="line">        y = <span class="variable language_">self</span>.root.winfo_pointery() - <span class="variable language_">self</span>.y_offset</span><br><span class="line">        <span class="variable language_">self</span>.root.geometry(<span class="string">f&quot;+<span class="subst">&#123;x&#125;</span>+<span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_data</span>(<span class="params">self, file=<span class="string">&quot;data.txt&quot;</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                lines = file.readlines()</span><br><span class="line">                <span class="keyword">if</span> lines:</span><br><span class="line">                    last_line = lines[-<span class="number">1</span>]</span><br><span class="line">                    lasttime, temperate0, humi = last_line.split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">                    temperate = temperate0.strip(<span class="string">&quot;℃ &quot;</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="variable language_">self</span>.number0_label.config(text=<span class="string">f&quot;时间：<span class="subst">&#123;<span class="string">&#x27; &#x27;</span>.join(lasttime.split(<span class="string">&#x27;_&#x27;</span>))&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="variable language_">self</span>.number1_label.config(text=<span class="string">f&quot;温度：<span class="subst">&#123;temperate&#125;</span>℃&quot;</span>)</span><br><span class="line">                    <span class="variable language_">self</span>.number2_label.config(text=<span class="string">f&quot;湿度：<span class="subst">&#123;humi.strip()&#125;</span>%&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;读取文件出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.root.after(<span class="number">10000</span>, <span class="variable language_">self</span>.update_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_line_chart</span>(<span class="params">self, window</span>):</span><br><span class="line">        fig = line_plot()</span><br><span class="line"></span><br><span class="line">        canvas = FigureCanvasTkAgg(fig, master=window)</span><br><span class="line">        canvas.draw()</span><br><span class="line">        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    root = tk.Tk()</span><br><span class="line">    app = AutoHideWindow(root)</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这两个代码要同时运行就可以实现实时接收数据和实时组件展示，只开第一个就可以实时接收数据。</p><h1 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h1><p><img src="/onion.github.io/images/%E7%94%B5%E8%B7%AF%E6%9D%BF_%E5%AE%9E%E6%97%B6%E6%B8%A9%E6%B9%BF%E5%BA%A6%E7%9B%91%E6%B5%8B%E7%B3%BB%E7%BB%9F%EF%BC%9Amicropython%E7%BC%96%E7%A0%81esp32%E4%B8%8Edht22%E6%A8%A1%E5%9D%97%E7%9A%84%E6%97%A0%E7%BA%BF%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E4%B8%8Epc%E7%AB%AF%E6%8E%A5%E6%94%B6%E9%A1%B9%E7%9B%AE/image-20241018154816588.jpg"></p><p>是一次很好的学习电路板模块的小项目，也可作为中学生实践课程项目。<br>希望大家多多交流讨论啊，本人也是新手，希望有更简单高效的解决方案。</p>]]></content>
      
      
      <categories>
          
          <category> 电路板 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>待整理-个人建站相关</title>
      <link href="/onion.github.io/2024/10/8060158be97f.html"/>
      <url>/onion.github.io/2024/10/8060158be97f.html</url>
      
        <content type="html"><![CDATA[<p>用于创建个人导航页：<br><a href="https://github.com/free-nav/freenav">free-nav&#x2F;freenav (github.com)</a><br>个人完美博客创建教程-夜法之书大佬：<br><a href="https://blog.17lai.site/posts/253706ff/">hexo博客博文撰写篇之完美笔记大攻略终极完全版 | 夜法之书 (17lai.site)</a></p>]]></content>
      
      
      <categories>
          
          <category> 待研究网站及项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网站搭建教程</title>
      <link href="/onion.github.io/2024/10/2befadf5e091.html"/>
      <url>/onion.github.io/2024/10/2befadf5e091.html</url>
      
        <content type="html"><![CDATA[<h2 id="配图"><a href="#配图" class="headerlink" title="配图"></a>配图<a href="https://blog.17lai.site/posts/253706ff/#%E9%85%8D%E5%9B%BE"></a></h2><p>众所周知，<strong>博客好不好看，配图占一半</strong>。这里给大家推荐几个我常用找配图的地方。<strong>另外，请遵循相关网站的版权协议。</strong></p><p><a href="https://www.google.com/imghp?hl=zh-CN">Google Image</a>是你的好搭档</p><h3 id="Wallpaper-Hub"><a href="#Wallpaper-Hub" class="headerlink" title="Wallpaper Hub"></a>Wallpaper Hub<a href="https://blog.17lai.site/posts/253706ff/#Wallpaper-Hub"></a></h3><p><img src="https://cimg1.17lai.site/data/2022/08/18/20220818103222.webp" alt="Wallpaper Hub"></p><p><strong>Wallpaper Hub</strong></p><p><strong><a href="https://wallpaperhub.app/">点击跳转到 Wallpaper Hub</a></strong></p><h3 id="Wallhaven"><a href="#Wallhaven" class="headerlink" title="Wallhaven"></a>Wallhaven<a href="https://blog.17lai.site/posts/253706ff/#Wallhaven"></a></h3><p><img src="https://cimg1.17lai.site/data/2022/08/18/20220818103222-1.webp" alt="Wallhaven"></p><p><strong>Wallhaven</strong></p><p><strong><a href="https://wallhaven.cc/">点击跳转到 Wallhaven</a></strong></p><h3 id="Unsplash"><a href="#Unsplash" class="headerlink" title="Unsplash"></a>Unsplash<a href="https://blog.17lai.site/posts/253706ff/#Unsplash"></a></h3><p><img src="https://cimg1.17lai.site/data/2022/08/18/20220818103222-2.webp" alt="Unsplash"></p><p><strong>Unsplash</strong></p><p><strong><a href="https://unsplash.com/">点击跳转到 Unsplash</a></strong></p><p>来源: 夜法之书<br>作者: 夜法之书<br>文章链接: <a href="https://blog.17lai.site/posts/253706ff/#%E9%85%8D%E5%9B%BE">https://blog.17lai.site/posts/253706ff/#%E9%85%8D%E5%9B%BE</a><br>本文章著作权归作者所有，任何形式的转载都请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 博客网站创建及使用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>运筹学基础资源-思维导图</title>
      <link href="/onion.github.io/2024/10/96a512c37990.html"/>
      <url>/onion.github.io/2024/10/96a512c37990.html</url>
      
        <content type="html"><![CDATA[<p><img src="/onion.github.io/images/%E8%BF%90%E7%AD%B9%E5%AD%A6%E5%9F%BA%E7%A1%80_%E8%BF%90%E7%AD%B9%E5%AD%A6%E5%9F%BA%E7%A1%80%E8%B5%84%E6%BA%90-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20241018112917433.jpg"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.scmor.com/view/6135">运筹学知识体系思维导图 - 思谋网 (scmor.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机系统结构笔记-第一章</title>
      <link href="/onion.github.io/2024/10/afbefedf4bde.html"/>
      <url>/onion.github.io/2024/10/afbefedf4bde.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-概论"><a href="#第一章-概论" class="headerlink" title="第一章 概论"></a>第一章 概论</h1><h2 id="第一节-计算机系统的层次结构"><a href="#第一节-计算机系统的层次结构" class="headerlink" title="第一节 计算机系统的层次结构"></a>第一节 计算机系统的层次结构</h2><h3 id="1-1计算机系统组成"><a href="#1-1计算机系统组成" class="headerlink" title="1.1计算机系统组成"></a>1.1计算机系统组成</h3><p>计算机系统 &#x3D; <strong>硬件&#x2F;固件+软件</strong></p><h3 id="1-2计算机语言的发展"><a href="#1-2计算机语言的发展" class="headerlink" title="1.2计算机语言的发展"></a>1.2计算机语言的发展</h3><p>计算机语言从低级到高级发展，高级语言的语句相较于低级语言功能更强，使用更方便，但都以低级语言为基础(更快)，以实现更高的执行效率。</p><h3 id="1-3层次结构"><a href="#1-3层次结构" class="headerlink" title="1.3层次结构"></a>1.3层次结构</h3><p>计算机语言的层次结构由高到低依次为：</p><ul><li><strong>应用语言机器级 M5</strong>：python、R等</li><li><strong>高级语言机器级 M4</strong>：接近机器一点</li><li><strong>汇编语言机器级 M3</strong>：特定计算机架构使用</li><li><strong>OS 机器级 M2</strong>：操作系统</li><li><strong>传统语言机器级 M1</strong>：早期</li><li><strong>微程序语言机器级 M0</strong>：实现指令集架构</li></ul><h3 id="1-4虚拟机"><a href="#1-4虚拟机" class="headerlink" title="1.4虚拟机"></a>1.4虚拟机</h3><p>虚拟机是由<strong>软件</strong>实现的机器。</p><h3 id="1-5语言实现的技术"><a href="#1-5语言实现的技术" class="headerlink" title="1.5语言实现的技术"></a>1.5语言实现的技术</h3><p>语言实现主要有两种技术：</p><ol><li><strong>翻译</strong>：将 N+1 级语言全部转化为 N 级语言后再执行，执行过程中 N+1 级语言不再访问。</li><li><strong>解释</strong>：每当一条 N+1 级指令被译码后，直接执行等效的 N 级指令，然后继续下一条 N+1 级指令，重复执行过程。</li></ol><h2 id="第二节-计算机系统结构、计算机组成和计算机实现"><a href="#第二节-计算机系统结构、计算机组成和计算机实现" class="headerlink" title="第二节 计算机系统结构、计算机组成和计算机实现"></a>第二节 计算机系统结构、计算机组成和计算机实现</h2><h3 id="2-1计算机系统结构的定义与内涵"><a href="#2-1计算机系统结构的定义与内涵" class="headerlink" title="2.1计算机系统结构的定义与内涵"></a>2.1计算机系统结构的定义与内涵</h3><p>定义：计算机系统结构是<strong>软件和硬件&#x2F;固件的交界面</strong>，即机器语言程序员看到的机器物理系统的抽象（简化概念）。</p><p>实质：确定计算机系统中软、硬件的界面，界面之上是硬件和软件实现的功能，界面之下是与硬件和固件实现的功能。</p><p>透明性：在计算机技术中，把这种百年来存在的事物或属性从某个角度看不到，则称之为对它透明。</p><h3 id="2-2计算机组成与计算机实现的定义与内涵"><a href="#2-2计算机组成与计算机实现的定义与内涵" class="headerlink" title="2.2计算机组成与计算机实现的定义与内涵"></a>2.2计算机组成与计算机实现的定义与内涵</h3><ul><li><p><strong>计算机组成定义</strong>：<br>  指计算机系统结构的逻辑实现，包括：</p><ul><li>机器级内部的数据流和控制流的组成。</li><li>逻辑设计等方面。</li></ul></li><li><p><strong>计算机实现定义</strong>：<br>  指计算机组成的物理实现，包括：</p><ul><li>处理机、主存等部件的物理结构。</li><li>器件的继承度和速度。</li><li>器件、模块的划分与连接。</li><li>专用器件的设计。</li></ul></li></ul><h3 id="2-3计算机系统结构、组成和实现的相互关系和影响"><a href="#2-3计算机系统结构、组成和实现的相互关系和影响" class="headerlink" title="2.3计算机系统结构、组成和实现的相互关系和影响"></a>2.3计算机系统结构、组成和实现的相互关系和影响</h3><ol><li>相同系统结构，可以有不同的组成；</li><li>一个组成可以有多种不同的实现方法；</li><li>采用不同的系统结构会使可以采用的组成技术产生差异；</li><li>组成也会影响结构；</li></ol><h2 id="第三节-计算机系统的软、硬件取舍及定量设计原理"><a href="#第三节-计算机系统的软、硬件取舍及定量设计原理" class="headerlink" title="第三节 计算机系统的软、硬件取舍及定量设计原理"></a>第三节 计算机系统的软、硬件取舍及定量设计原理</h2><h3 id="3-1-软硬件取舍的基本原则"><a href="#3-1-软硬件取舍的基本原则" class="headerlink" title="3.1 软硬件取舍的基本原则"></a>3.1 软硬件取舍的基本原则</h3><ol><li><p><strong>性能与成本权衡</strong>：</p><ul><li>提高硬件功能比例可提升解题速度，减少程序所需存储空间，但会增加硬件成本，并降低硬件利用率和系统灵活性。</li><li>提高软件比例可降低硬件成本，增强系统灵活性和适应性，但可能导致解题速度下降，并增加软件设计复杂性和存储需求。</li></ul></li><li><p><strong>性价比优化</strong>：</p><ul><li>从实现费用、速度和其他性能要求综合考虑，确保获取高性价比的解决方案。</li></ul></li><li><p><strong>技术选择的灵活性</strong>：</p><ul><li>考虑到当前和未来可能采用的组成技术，避免过多或不合理的限制，以促进各种技术的灵活应用。</li></ul></li><li><p><strong>综合考虑软硬件支持</strong>：</p><ul><li>不仅要从硬件角度考虑如何便利应用组成技术，还应关注如何为编译器、操作系统及高级语言程序设计提供更好的硬件支持。</li></ul></li></ol><h3 id="3-2-计算机系统的定量设计原理"><a href="#3-2-计算机系统的定量设计原理" class="headerlink" title="3.2 计算机系统的定量设计原理"></a>3.2 计算机系统的定量设计原理</h3><ol><li><p><strong>Huffman原理</strong>：</p><ul><li>优先加速处理高频率事件的性能提升，效果显著，远胜于加速处理低概率事件。</li></ul></li><li><p><strong>Amdahl定律</strong>：</p><ul><li><strong>思想</strong>：加速某个部件的执行速度所能获得的系统性能提升，受限于该部件在总执行时间中所占的比例。</li><li><strong>加速比公式</strong>：Sp &#x3D; Told&#x2F;Tnew &#x3D; 1&#x2F;((1-Fnew) + 可改进比 Fnew&#x2F;部件加速比Rnew)</li><li><strong>原理</strong>：定义系统性能的加速比，确定对系统中性能瓶颈部件，计算改进某些部件所获得的性能提高。</li></ul></li><li><p>程序访问的局部性定律</p><ol><li>空间局部性：循环语句；变量，数据；</li><li>时间局部性：顺序语句：</li></ol></li></ol><h3 id="3-3-计算机系统设计的主要任务和方法"><a href="#3-3-计算机系统设计的主要任务和方法" class="headerlink" title="3.3 计算机系统设计的主要任务和方法"></a>3.3 计算机系统设计的主要任务和方法</h3><ol><li>计算机系统设计的主要方法</li><li>计算机系统的设计方法</li></ol><h2 id="第四节-软件、应用、器件的发展对系统结构的影响"><a href="#第四节-软件、应用、器件的发展对系统结构的影响" class="headerlink" title="第四节 软件、应用、器件的发展对系统结构的影响"></a>第四节 软件、应用、器件的发展对系统结构的影响</h2><h3 id="4-1-软件发展对系统结构的影响"><a href="#4-1-软件发展对系统结构的影响" class="headerlink" title="4.1 软件发展对系统结构的影响"></a>4.1 软件发展对系统结构的影响</h3><h4 id="软件的可移植性"><a href="#软件的可移植性" class="headerlink" title="软件的可移植性"></a>软件的可移植性</h4><ul><li><strong>定义</strong>：可移植性指一个软件能够在不同计算机上运行，而无需进行大量修改，允许同一软件在多种环境中应用。</li></ul><h4 id="实现软件移植的技术"><a href="#实现软件移植的技术" class="headerlink" title="实现软件移植的技术"></a>实现软件移植的技术</h4><ol><li><p><strong>统一高级语言</strong>：</p><ul><li>设计一种通用的高级语言，使程序员能够在不同计算机之间进行软件设计。这种技术适用于结构相同或完全不同的机器。</li></ul></li><li><p><strong>采用系列机</strong>：</p><ul><li>使用由同一厂家生产、具有相似系统结构的不同型号机器。这种技术仅适用于结构相似的机器之间的汇编程序移植。</li></ul></li><li><p><strong>模拟和仿真</strong>：</p><ul><li><strong>模拟</strong>：<ul><li><strong>概念</strong>：使用机器语言程序来实现软件移植。</li><li><strong>特点</strong>：运行速度较慢，性能较差。</li></ul></li><li><strong>仿真</strong>：<ul><li><strong>概念</strong>：用微程序直接解释另一种机器的指令系统。</li><li><strong>特点</strong>：除了仿真目标机器的指令系统，还需仿真其存储体系、I&#x2F;O系统和控制台操作。</li></ul></li></ul></li></ol><h4 id="模拟与仿真的区别"><a href="#模拟与仿真的区别" class="headerlink" title="模拟与仿真的区别"></a>模拟与仿真的区别</h4><ul><li><strong>解释语言</strong>：<ul><li><strong>仿真</strong>：使用微程序解释，解释程序存储在控制存储器中。</li><li><strong>模拟</strong>：使用机器语言解释，解释程序存储在主存中。</li></ul></li></ul><h4 id="模拟与仿真的选择"><a href="#模拟与仿真的选择" class="headerlink" title="模拟与仿真的选择"></a>模拟与仿真的选择</h4><ul><li>在不同系列间的软件移植中，通常需要同时使用仿真与模拟。</li><li><strong>仿真</strong>：适用于频繁使用的机器指令，以提高速度。</li><li><strong>模拟</strong>：适用于不常用或难以仿真的指令及I&#x2F;O操作。即使两种机器系统差别不大，通常也需要模拟来完成机器间的映像。</li></ul><h3 id="4-2-应用的发展对系统结构的影响"><a href="#4-2-应用的发展对系统结构的影响" class="headerlink" title="4.2 应用的发展对系统结构的影响"></a>4.2 应用的发展对系统结构的影响</h3><p>计算机应用可归纳为向上升级的四类：数据处理、信息处理、知识处理、智能处理。</p><ol><li>数据处理<br>定义：对原始数据进行收集、存储、整理和简单计算的过程。<br>例子：电子表格、数据库管理、基本的统计分析。</li><li>信息处理<br>定义：在数据处理的基础上，对数据进行分析和解释，以生成有意义的信息。<br>例子：报告生成、数据可视化、信息检索系统。</li><li>知识处理<br>定义：基于信息处理，将信息进行进一步分析、推理和决策，以生成知识。<br>例子：专家系统、决策支持系统、知识管理系统。</li><li>智能处理<br>定义：利用人工智能技术，使计算机能够进行自主学习、推理和决策，从而实现更复杂的任务。<br>例子：机器学习、自然语言处理、智能助手（如虚拟助手和聊天机器人）。</li></ol><h3 id="4-3-器件发展对系统结构的影响"><a href="#4-3-器件发展对系统结构的影响" class="headerlink" title="4.3 器件发展对系统结构的影响"></a>4.3 器件发展对系统结构的影响</h3><ol><li>改变了逻辑设计的传统方法；</li><li>随着时间呈指数地改进，使计算机的性价比有了显著提高；</li><li>加速了结构的”下移“；</li><li>促进了算法、语言和软件的发展。</li></ol><h2 id="第五节-系统结构中的并行性开发及计算机系统的分类"><a href="#第五节-系统结构中的并行性开发及计算机系统的分类" class="headerlink" title="第五节 系统结构中的并行性开发及计算机系统的分类"></a>第五节 系统结构中的并行性开发及计算机系统的分类</h2><h3 id="5-1-并行性的概念和开发"><a href="#5-1-并行性的概念和开发" class="headerlink" title="5.1 并行性的概念和开发"></a>5.1 并行性的概念和开发</h3><h4 id="并行性的含义与级别"><a href="#并行性的含义与级别" class="headerlink" title="并行性的含义与级别"></a>并行性的含义与级别</h4><ul><li><strong>定义</strong>：并行性是指可以同时进行运算或操作的特性，涵盖了同时性和并发性两种含义。<ul><li><strong>同时性</strong>：指两个或多个事件在同一时刻发生。</li><li><strong>并发性</strong>：指两个或多个事件在同一时间间隔内发生，但不一定同时。</li></ul></li></ul><h4 id="并行性的不同等级"><a href="#并行性的不同等级" class="headerlink" title="并行性的不同等级"></a>并行性的不同等级</h4><ol><li><p><strong>从计算机系统执行程序的角度</strong>：</p><ul><li><strong>指令内部</strong>：在一条指令中同时进行多个操作。</li><li><strong>指令之间</strong>：不同指令的并行执行。</li><li><strong>任务或进程之间</strong>：多个任务或进程可以同时进行。</li><li><strong>作用或程序之间</strong>：不同程序或模块的并行运行。</li></ul></li><li><p><strong>从计算机系统处理数据的角度</strong>：</p><ul><li><strong>位串字串</strong>：处理位串和字串的并行。</li><li><strong>位并字串</strong>：位与字串的并行处理。</li><li><strong>位片串字并</strong>：位片和字串的并行。</li><li><strong>全并行</strong>：所有数据操作同时进行的状态。</li></ul></li><li><p><strong>从计算机信息加工的各个步骤和阶段的角度</strong>：</p><ul><li><strong>存储器操作并行</strong>：存储器中的多个操作可以同时进行。</li><li><strong>处理器操作步骤并行</strong>：处理器执行不同步骤时的并行。</li><li><strong>处理器操作并行</strong>：处理器中多个操作的并行执行。</li><li><strong>指令、任务、作业并行</strong>：不同级别的指令、任务和作业可并行执行。</li></ul></li></ol><h4 id="并行性开发的途径"><a href="#并行性开发的途径" class="headerlink" title="并行性开发的途径"></a>并行性开发的途径</h4><ol><li><p><strong>时间重叠</strong>：<br> 让多个处理过程在时间上相互错开，轮流重叠地使用同一套硬件设备的各个部分，提升速度。例如，流水线技术。</p></li><li><p><strong>资源重复</strong>：<br> 通过重复设置硬件资源来提高可靠性或性能。例如，多CPU、多核和多内存的配置。</p></li><li><p><strong>资源共享</strong>：<br> 采用软件方法，让多个用户按一定时间顺序轮流使用同一套资源，从而提高资源利用率和系统性能。例如，分时调度。</p></li></ol><h4 id="计算机系统的并行性发展"><a href="#计算机系统的并行性发展" class="headerlink" title="计算机系统的并行性发展"></a>计算机系统的并行性发展</h4><ul><li><strong>多机系统的耦合度</strong>：<br>  耦合度反映多机系统中各机器之间物理连接的紧密程度和交叉作用能力的强弱。这是评估并行性和系统性能的重要指标。</li></ul><h3 id="5-2-计算机系统的分类"><a href="#5-2-计算机系统的分类" class="headerlink" title="5.2 计算机系统的分类"></a>5.2 计算机系统的分类</h3><p><strong>Flynn分类法：</strong><br>单指令流单数据流SISD；<br>单指令流多数据流SIMD；<br>多指令流单数据流MISD；<br>多指令流多数据流MIMD。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机系统结构 </tag>
            
            <tag> 计算机科学与技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机系统结构资源汇总</title>
      <link href="/onion.github.io/2024/10/72c17e25381b.html"/>
      <url>/onion.github.io/2024/10/72c17e25381b.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_43605641/article/details/124428484">02325《计算机系统结构》自考复习重点目录_02325填空题简答题考点-CSDN博客</a><br><a href="https://blog.csdn.net/meiaoxue1234/article/details/136080117">计算机系统结构-考试知识点总结_自考计算机系统结构知识点!-CSDN博客</a><br>名词解释：<a href="https://abg.baidu.com/ndoffview/83b447272f60ddccda38a0ec">自考02325计算机系统结构–复习资料大全 - 百度爱伴功 (baidu.com)</a><br>章节:<a href="https://abg.baidu.com/view/5a655ae9998fcc22bcd10d4f">自考02325计算机系统结构考点笔记 - 百度爱伴功 (baidu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机系统结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摆摊记录</title>
      <link href="/onion.github.io/2024/10/b335c69e039e.html"/>
      <url>/onion.github.io/2024/10/b335c69e039e.html</url>
      
        <content type="html"><![CDATA[<p>说来好笑，之前一直对于这种耗费精力大的营业活动不感冒，觉得自己是个大学生没必要为了赚点钱来将自己投入这种事业，但是自从摆摊之后，感受到了更多鲜活的生命，果然，人是群居动物，哈哈哈。<br>因为自己总是会想很多。</p>]]></content>
      
      
      <categories>
          
          <category> 调酒（生活） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用git+hexo+github pages创建个人博客网站（二）</title>
      <link href="/onion.github.io/2024/10/cee6e52e4b89.html"/>
      <url>/onion.github.io/2024/10/cee6e52e4b89.html</url>
      
        <content type="html"><![CDATA[<h1 id="选择使用-Hexo-主题"><a href="#选择使用-Hexo-主题" class="headerlink" title="选择使用 Hexo 主题"></a>选择使用 Hexo 主题</h1><p>博主目前使用的是 Butterfly 主题。之前尝试过 Fluid 主题，虽然 Fluid 更适合专注于写作，但博主希望在博客中展示更多内容。因此，选择一个更具理工特色的主题显得更为合适。<br><img src="/onion.github.io/images/%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E5%88%9B%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8_%E4%BD%BF%E7%94%A8git+hexo+github-pages%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%EF%BC%89/image-20241018120005811.jpg"><br>主题演示网站：<a href="https://butterfly.js.org/">Butterfly - A Simple and Card UI Design theme for Hexo</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客网站创建及使用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小记：从自己喝到请人喝到摆酒摊</title>
      <link href="/onion.github.io/2024/10/1cb32d4e308e.html"/>
      <url>/onion.github.io/2024/10/1cb32d4e308e.html</url>
      
        <content type="html"><![CDATA[<p>最初，我只是一个喜欢独自享受美酒的人。那时，我会在闲暇时光里，静静地坐在阳台上，品味一杯好酒，享受那份独处带来的宁静。每一口酒入喉，仿佛都能驱散一天的疲惫。我会沉浸在酒香中，思考生活中的点点滴滴，仿佛这一刻是属于我自己的小世界。</p><p>随着时间的推移，我开始邀请朋友们一同分享这份喜悦。每当聚会来临，我总是乐于准备几瓶酒，设定一个温馨的场景，与朋友们围坐在一起，畅谈生活的趣事。那种欢声笑语伴随着酒香四溢，蔓延在空气中，让我感受到友情的温暖。酒，不再只是我一个人的享受，而是成为了我们共同的快乐源泉。</p><p>渐渐地，我的热情推动我向更大的舞台迈进。我决定不再仅仅是在家中聚会，而是要把这份喜爱分享给更多的人。于是，我开始尝试摆酒摊，参加各种集市和活动。在那里，我不仅向陌生人介绍我所钟爱的酒品，还与他们分享我的饮酒故事。每当看到人们在我的摊位前驻足，品尝我精心挑选的酒，脸上露出满意的笑容时，我的心中便充满了成就感。</p><p>从最初的独自饮酒，到后来请朋友们喝酒，再到如今在酒摊前与更多人分享美酒，这一过程不仅让我享受到了饮酒的乐趣，更让我体会到分享的快乐与人际交往的美好。生活就像一杯酒，越是分享，越能品出其中的甘醇。我期待着未来能有更多的机会，让不同的人在我的酒摊前相聚，共同创造更多美好的回忆。</p>]]></content>
      
      
      <categories>
          
          <category> 调酒（生活） </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>结合时间点分析不同因素对蛋白质稳定性（表达量）的贡献进行研究</title>
      <link href="/onion.github.io/2024/10/b4c2a69ed0ad.html"/>
      <url>/onion.github.io/2024/10/b4c2a69ed0ad.html</url>
      
        <content type="html"><![CDATA[<p>问题可以通过结合时间点分析不同因素对蛋白质稳定性（表达量）的贡献进行研究。这类问题可以通过多元回归分析、时间序列分析等方法来解决。具体步骤如下：</p><h3 id="1-问题分析："><a href="#1-问题分析：" class="headerlink" title="1. 问题分析："></a>1. 问题分析：</h3><p>分析蛋白质表达量如何受到以下因素的影响：</p><ul><li><p>转录表达量</p></li><li><p>磷酸化修饰、泛素化修饰</p></li><li><p>蛋白质长度</p></li><li><p>氨基酸特征（STY和K的占比及其修饰情况）</p></li><li><p>时间点的影响</p></li><li><p><strong>转录表达</strong>: 蛋白质的表达通常与其转录水平正相关，因此，转录表达是最直接影响蛋白质表达的因素之一。</p></li><li><p><strong>磷酸化修饰</strong>: 磷酸化可影响蛋白质的稳定性、功能及其在细胞中的寿命，不同时间点的修饰丰度可能对蛋白质的表达量产生影响。</p></li><li><p><strong>泛素化修饰</strong>: 泛素化影响蛋白质的降解，因此，泛素修饰的丰度与蛋白质表达的稳定性密切相关。</p></li><li><p><strong>蛋白质长度</strong>: 蛋白质的长度可能影响其表达水平，一般来说，较长的蛋白质可能在翻译或折叠过程中更加耗能，从而影响其表达。</p></li><li><p><strong>氨基酸组成</strong>: 特定氨基酸如 STY 和 K 的比例及其修饰情况（如磷酸化或泛素化）可能影响蛋白质的功能和稳定性。</p></li></ul><p>蛋白质表达的模型可以表示为：<br><math><semantics><mrow><msub><mi>Y</mi><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>e</mi><mi>i</mi><mi>n</mi></mrow></msub><mo>(</mo><mi>t</mi><mo>)</mo><mo>&#x3D;</mo><msub><mi>β</mi><mn>1</mn></msub><mo>⋅</mo><msub><mi>X</mi><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>t</mi></mrow></msub><mo>(</mo><mi>t</mi><mo>)</mo><mo>+</mo><msub><mi>β</mi><mn>2</mn></msub><mo>⋅</mo><msub><mi>X</mi><mrow><mi>p</mi><mi>h</mi><mi>o</mi><mi>s</mi><mi>p</mi><mi>h</mi><mi>o</mi><mi>r</mi><mi>y</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></msub><mo>(</mo><mi>t</mi><mo>)</mo><mo>+</mo><msub><mi>β</mi><mn>3</mn></msub><mo>⋅</mo><msub><mi>X</mi><mrow><mi>u</mi><mi>b</mi><mi>i</mi><mi>q</mi><mi>u</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></msub><mo>(</mo><mi>t</mi><mo>)</mo><mo>+</mo><msub><mi>β</mi><mn>4</mn></msub><mo>⋅</mo><msub><mi>X</mi><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi></mrow></msub><mo>+</mo><msub><mi>β</mi><mn>5</mn></msub><mo>⋅</mo><msub><mi>X</mi><mrow><mi>a</mi><mi>m</mi><mi>i</mi><mi>n</mi><mi>o</mi><mi>_</mi><mi>a</mi><mi>c</mi><mi>i</mi><mi>d</mi></mrow></msub><mo>+</mo><mi>ϵ</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow><annotation>Y_{protein}(t) &#x3D; \beta_1 \cdot X_{transcript}(t) + \beta_2 \cdot X_{phosphorylation}(t) + \beta_3 \cdot X_{ubiquitination}(t) + \beta_4 \cdot X_{length} + \beta_5 \cdot X_{amino\_acid} + \epsilon(t)</annotation></semantics></math><br>其中，<math><semantics><mrow><mi>ϵ</mi><mo>(</mo><mi>t</mi><mo>)</mo></mrow><annotation>\epsilon(t)</annotation></semantics></math>表示随机误差项，时间 <math><semantics><mrow><mi>t</mi></mrow><annotation>t</annotation></semantics></math>表示不同时间点。</p><h3 id="2-数据预处理："><a href="#2-数据预处理：" class="headerlink" title="2. 数据预处理："></a>2. 数据预处理：</h3><p>需要将各个 sheet 中的数据按照 <code>updated_transcript_id</code> 合并。为了便于分析，可以采取以下步骤：</p><h4 id="a-转录表达、蛋白质表达数据"><a href="#a-转录表达、蛋白质表达数据" class="headerlink" title="a. 转录表达、蛋白质表达数据"></a>a. 转录表达、蛋白质表达数据</h4><ul><li>合并表格，通过 <code>updated_transcript_id</code> 作为键，将相同时间点上的表达数据整合。</li></ul><h4 id="b-修饰数据"><a href="#b-修饰数据" class="headerlink" title="b. 修饰数据"></a>b. 修饰数据</h4><ul><li>将磷酸化和泛素化修饰的表格分别整合。</li><li>处理重复ID，针对不同修饰位点的ID取平均值或进行修饰丰度加权。</li></ul><h4 id="c-蛋白质长度、氨基酸特征"><a href="#c-蛋白质长度、氨基酸特征" class="headerlink" title="c. 蛋白质长度、氨基酸特征"></a>c. 蛋白质长度、氨基酸特征</h4><ul><li>根据磷酸化和泛素化数据中的蛋白质长度、氨基酸特征数据，计算每个蛋白质的相关比值。</li></ul><h4 id="d-时间点的处理"><a href="#d-时间点的处理" class="headerlink" title="d. 时间点的处理"></a>d. 时间点的处理</h4><ul><li>将不同时间点的数据作为多个特征（例如，0小时、6小时等），以矩阵形式供分析。</li></ul><h3 id="3-模型建立与分析："><a href="#3-模型建立与分析：" class="headerlink" title="3. 模型建立与分析："></a>3. 模型建立与分析：</h3><ul><li>使用多元线性回归模型来分析各因素对蛋白质表达的贡献，并为不同时间点的数据建立回归模型。</li><li>还可以使用随机森林等模型来识别不同时间点下特征的重要性。</li><li>通过时间序列分析方法（如VAR模型、混合效应模型）可以考虑时间的动态变化，进一步捕捉时间点对这些因素贡献的差异。</li></ul><h3 id="4-Python-实现："><a href="#4-Python-实现：" class="headerlink" title="4. Python 实现："></a>4. Python 实现：</h3><p>假设你的数据已经读入为 <code>pandas</code> DataFrame 格式，以下是数据处理和初步的回归分析代码框架：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">transcript_df = pd.read_excel(<span class="string">&#x27;data.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;transcript&#x27;</span>)</span><br><span class="line">protein_df = pd.read_excel(<span class="string">&#x27;data.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;protein&#x27;</span>)</span><br><span class="line">phosphorylation_df = pd.read_excel(<span class="string">&#x27;data.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;phosphorylation&#x27;</span>)</span><br><span class="line">ubiquitination_df = pd.read_excel(<span class="string">&#x27;data.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;ubiquitination&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并数据</span></span><br><span class="line">data = pd.merge(transcript_df, protein_df, on=<span class="string">&#x27;updated_transcript_id&#x27;</span>)</span><br><span class="line">data = pd.merge(data, phosphorylation_df, on=<span class="string">&#x27;updated_transcript_id&#x27;</span>, how=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">data = pd.merge(data, ubiquitination_df, on=<span class="string">&#x27;updated_transcript_id&#x27;</span>, how=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理缺失值和重复值 (如适用)</span></span><br><span class="line">data.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取特征和标签 (以蛋白质表达为标签)</span></span><br><span class="line">X = data.drop(columns=[<span class="string">&#x27;protein_expression_0&#x27;</span>, <span class="string">&#x27;protein_expression_6&#x27;</span>, <span class="string">&#x27;protein_expression_12&#x27;</span>, <span class="string">&#x27;protein_expression_24&#x27;</span>, <span class="string">&#x27;protein_expression_48&#x27;</span>, <span class="string">&#x27;protein_expression_72&#x27;</span>])</span><br><span class="line">y = data[[<span class="string">&#x27;protein_expression_0&#x27;</span>, <span class="string">&#x27;protein_expression_6&#x27;</span>, <span class="string">&#x27;protein_expression_12&#x27;</span>, <span class="string">&#x27;protein_expression_24&#x27;</span>, <span class="string">&#x27;protein_expression_48&#x27;</span>, <span class="string">&#x27;protein_expression_72&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化特征值</span></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">X_scaled = scaler.fit_transform(X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立回归模型</span></span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(X_scaled, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出回归系数（即不同特征的贡献值）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;回归系数:&quot;</span>, model.coef_)</span><br></pre></td></tr></table></figure><h3 id="5-后续分析："><a href="#5-后续分析：" class="headerlink" title="5. 后续分析："></a>5. 后续分析：</h3><p>你可以进一步进行交叉验证，或者使用不同时间点的数据进行单独分析，找到在不同时间点上贡献最大的特征。</p><p>这只是一个基础的框架，可以根据实际需要进行调整。如果需要更详细的代码或某部分的细化分析，可以进一步讨论。</p>]]></content>
      
      
      <categories>
          
          <category> 其他分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小记：从不喝咖啡到买了咖啡机到懒得喝咖啡</title>
      <link href="/onion.github.io/2024/10/c001381b2274.html"/>
      <url>/onion.github.io/2024/10/c001381b2274.html</url>
      
        <content type="html"><![CDATA[<p>最初，我对咖啡保持漠视的态度。那种苦涩的滋味在我心中始终与健康相对立，仿佛是某种奢侈的消费品，浮华而虚无。每当朋友们围坐在一起，热烈地讨论着咖啡的香气与口感，我却像个旁观者，默默地捧着一杯清水，心中暗自得意：我与这些浮躁的追寻毫不相干。</p><p>然而，随着健身的深入，我的生活开始变得忙碌而紧张。健身房里的每一次挥汗如雨都让我体会到身体的极限，而我也渐渐了解到，咖啡中富含的咖啡因，能够提升运动表现，并有很多健身博主推荐。这让我对它产生了新的兴趣。于是，我心中那根倔强的弦被拨动了，决定投资一台千元的咖啡机，怀着试一试的心态，将它引入我的生活。</p><p>在宿舍的日子里，咖啡机成了我生活的中心。每当清晨的第一缕阳光透过窗帘洒进房间，我便兴奋地为自己研磨咖啡豆，细细享受那一刻的宁静。热气腾腾的咖啡在杯中缓缓流淌，浓郁的香气弥漫开来，仿佛整个世界都在这一杯中凝聚。每一口都是一种仪式，带着我对生活的热爱和对未来的期盼。</p><p>不久后，我的将咖啡机搬到了实验室。热情依旧，我开始为同学们制作咖啡，像一位小小的咖啡师，乐于分享这份乐趣。看着他们品尝我亲手制作的咖啡，脸上绽放出满足的笑容，我的内心也随之欢悦，仿佛这不仅仅是一杯饮品，更是一种沟通与连接的方式。</p><p>然而，随着时间的推移，这种热情逐渐被日常琐事所淹没。喜欢喝咖啡的师兄也开始频繁地为大家制作咖啡，我的角色逐渐模糊，曾经那个热爱制作咖啡的人，最终几乎不再动手。看着他们在咖啡机前忙碌，轻松自如地调配出一杯杯香浓的咖啡，我的心中涌起一阵复杂的情感。那种曾经的自豪感被悄然取代，取而代之的是一丝淡淡的失落与无奈。</p><p>不过，心底深处，我暗自盘算着：或许可以培养一些师弟，让他们为我制作咖啡。这不是简单的妥协，而是一种对往昔热情的延续。看着他们在咖啡机前跃跃欲试，我希望能将这份热爱传递下去，仿佛在重拾那份温暖的记忆，谁说喝咖啡一定要亲自做？我这可是一种“懒人哲学”的新尝试！让咖啡的香气再次弥漫在我们的生活中。这样的想法让我心中燃起一点希望，生活或许不仅仅是忙碌的琐事，还有那些曾经的快乐与现在的期待。</p><p>回首这段经历，我意识到，热情与兴趣就像生活中的潮起潮落，时而高涨，时而低沉。重要的不是我曾经热爱过什么，而是如何在变化中找到自己的节奏，如何在生活的忙碌与宁静之间找到平衡。或许，咖啡只是我生活中的一部分，但它教会我如何去感受，去珍惜那些看似平常却充满温度的瞬间。</p>]]></content>
      
      
      <categories>
          
          <category> 咖啡（生活） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 咖啡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名词：MapReduce</title>
      <link href="/onion.github.io/2024/10/3d1d7b5083e7.html"/>
      <url>/onion.github.io/2024/10/3d1d7b5083e7.html</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>MapReduce</strong> 是一种编程模型和处理大规模数据集的计算框架，最初由 Google 提出，广泛应用于分布式计算环境，尤其是在大数据处理领域。它的核心思想是将任务分解为两个主要步骤：Map 和 Reduce。</p><h3 id="主要组成部分"><a href="#主要组成部分" class="headerlink" title="主要组成部分"></a>主要组成部分</h3><ol><li><p><strong>Map 阶段</strong>：</p><ul><li>输入数据被分成多个片段，分发给不同的节点进行并行处理。</li><li>每个节点执行一个用户定义的 Map 函数，处理数据并生成中间键值对。</li><li>示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">map_function</span>(<span class="params">key, value</span>):</span><br><span class="line">    <span class="comment"># 处理输入数据并生成 (中间键, 中间值) 对</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> value.split():</span><br><span class="line">        emit(word, <span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Shuffle 和 Sort</strong>：</p><ul><li>该阶段负责将所有 Map 的输出结果根据键进行分组，并将相同键的值汇总到一起。</li><li>这使得后续的 Reduce 可以处理相同键的所有值。</li></ul></li><li><p><strong>Reduce 阶段</strong>：</p><ul><li>接收来自 Map 阶段的中间结果，进行聚合处理。</li><li>用户定义的 Reduce 函数对每个键的所有值执行操作，生成最终的输出结果。</li><li>示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reduce_function</span>(<span class="params">key, values</span>):</span><br><span class="line">    <span class="keyword">return</span> key, <span class="built_in">sum</span>(values)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li><strong>大数据处理</strong>：分析海量数据集，例如日志分析、社交媒体数据处理等。</li><li><strong>数据挖掘</strong>：提取隐藏在大数据中的信息。</li><li><strong>机器学习</strong>：在分布式环境中训练模型。</li></ul><h3 id="优势和挑战"><a href="#优势和挑战" class="headerlink" title="优势和挑战"></a>优势和挑战</h3><h4 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h4><ul><li><strong>可扩展性</strong>：能够处理从 GB 到 PB 级别的数据。</li><li><strong>容错性</strong>：在节点失败的情况下，系统会自动重试任务。</li><li><strong>并行处理</strong>：通过将任务分配到多个节点，提高处理效率。</li></ul><h4 id="挑战："><a href="#挑战：" class="headerlink" title="挑战："></a>挑战：</h4><ul><li><strong>编程复杂性</strong>：需要理解 MapReduce 模型和工作原理。</li><li><strong>调试困难</strong>：在大规模分布式环境中调试时，难以定位问题。</li><li><strong>性能瓶颈</strong>：在某些情况下，Shuffle 和 Sort 过程可能成为性能瓶颈。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>MapReduce 是处理大规模数据的一种有效工具，适合于分布式计算环境。通过将任务分解为 Map 和 Reduce 两个阶段，它能够高效地处理和分析海量数据。理解 MapReduce 的原理和应用场景，对于从事大数据分析和处理的人员非常重要。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用转录组数据检查控制性状的单基因</title>
      <link href="/onion.github.io/2024/10/715709c84f42.html"/>
      <url>/onion.github.io/2024/10/715709c84f42.html</url>
      
        <content type="html"><![CDATA[<h3 id="实验背景"><a href="#实验背景" class="headerlink" title="实验背景"></a>实验背景</h3><p>筛选了控制单一性状（如株高）的两个F2群体。亲本为纯合的矮化株（dwarf，基因型 aa）和高株型（High，基因型 AA），F1为杂合（Aa），F2群体分离比例为三比一，表现为矮化型（aa）和高株型（Aa, AA）。我们计划使用F2群体的转录组数据进行基因组分析，寻找控制目标性状的基因位点。</p><p><img src="/onion.github.io/images/%E4%BD%BF%E7%94%A8%E8%BD%AC%E5%BD%95%E7%BB%84%E6%95%B0%E6%8D%AE%E6%A3%80%E6%9F%A5%E6%8E%A7%E5%88%B6%E6%80%A7%E7%8A%B6%E7%9A%84%E5%8D%95%E5%9F%BA%E5%9B%A0/image-20241017082627139.jpg" alt="实验流程示意图"></p><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><p>通过分析F2群体的转录组数据，定位可能控制株高性状的基因位置。</p><h3 id="实验方案"><a href="#实验方案" class="headerlink" title="实验方案"></a>实验方案</h3><p>为了分析突变的位置与表达影响，考虑以下两种情况：</p><ol><li><strong>SNP情况</strong>：单碱基突变，影响基因表达。</li><li><strong>INDEL情况</strong>：插入或缺失，影响基因结构和功能。</li></ol><p>此外，可能存在<strong>隐性基因不表达</strong>的情况，需要特别分析其对性状的影响。</p><h4 id="2-1-隐性基因由于碱基突变及其表达情况"><a href="#2-1-隐性基因由于碱基突变及其表达情况" class="headerlink" title="2.1 隐性基因由于碱基突变及其表达情况"></a>2.1 隐性基因由于碱基突变及其表达情况</h4><ul><li>提取aa样本中的纯合位点，可以稍微宽松一点，使用突变率分别在0-0.1以及0.9-1的部分。</li><li>找到高杆（Aa,AA）中对应的位点，突变率是否是存在较大差异的。</li><li>高杆F2中a：A比例应为1:2（假设为经典孟德尔分离），该比例可作为检验标准。</li></ul><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><ol><li><p><strong>数据合并</strong>：</p><ul><li>将不同样本的混合测序数据合并，生成原始测序文件（<code>fq.gz</code>格式）。</li></ul></li><li><p><strong>质控处理</strong>：</p><ul><li>使用 <code>FastQC</code> 对原始数据进行质量检测。</li><li>使用 <code>Trimmomatic</code> 或 <code>Cutadapt</code> 去除低质量碱基及接头序列，并再次进行质量控制。</li></ul></li><li><p><strong>比对分析</strong>：</p><ul><li>使用 <code>Hisat2</code> 工具将质控后的数据比对到参考基因组。</li><li>为确保高质量比对，采用单一比对数据。</li></ul></li><li><p><strong>SNP&#x2F;INDEL 变异检测</strong>：</p><ul><li>使用 <code>GATK</code> 或 <code>samtools</code> 对比对结果进行SNP和INDEL检测。</li><li>只保留测序深度大于等于20的位点，生成VCF文件。</li></ul></li><li><p><strong>VCF 文件处理</strong>：</p><ul><li>对VCF文件进行进一步处理，分为SNP和INDEL两部分。</li><li>对每一部分进行过滤和注释，找出可能影响性状的突变位点或基因。</li></ul></li></ol><h3 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h3><h4 id="VCF文件处理"><a href="#VCF文件处理" class="headerlink" title="VCF文件处理"></a>VCF文件处理</h4><p>下面的代码用于将VCF文件中的SNP和INDEL位点分离并进行注释分析。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提取SNP位点</span></span><br><span class="line">bcftools view -v snps input.vcf &gt; snps_only.vcf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取INDEL位点</span></span><br><span class="line">bcftools view -v indels input.vcf &gt; indels_only.vcf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释SNP位点</span></span><br><span class="line">snpEff ann reference_genome snps_only.vcf &gt; annotated_snps.vcf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释INDEL位点</span></span><br><span class="line">snpEff ann reference_genome indels_only.vcf &gt; annotated_indels.vcf</span><br></pre></td></tr></table></figure><h4 id="Python-脚本：处理VCF数据并分析基因型比例"><a href="#Python-脚本：处理VCF数据并分析基因型比例" class="headerlink" title="Python 脚本：处理VCF数据并分析基因型比例"></a>Python 脚本：处理VCF数据并分析基因型比例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %%</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  <span class="comment"># 导入 pandas 库以便进行数据处理</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 导入 sys 库以便处理命令行参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_vcf</span>(<span class="params">vcf_file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;解析 VCF 文件并返回 DataFrame&quot;&quot;&quot;</span></span><br><span class="line">    records = []  <span class="comment"># 用于存储解析的记录</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(vcf_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:  <span class="comment"># 打开 VCF 文件</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file:  <span class="comment"># 遍历文件的每一行</span></span><br><span class="line">            <span class="keyword">if</span> line.startswith(<span class="string">&quot;#&quot;</span>):  <span class="comment"># 跳过注释行</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            columns = line.strip().split(<span class="string">&quot;\t&quot;</span>)  <span class="comment"># 按制表符分割每行数据</span></span><br><span class="line">            records.append(columns[:<span class="number">8</span>])  <span class="comment"># 只保留前8列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个 DataFrame，列名分别为 VCF 文件中的字段</span></span><br><span class="line">    <span class="keyword">return</span> pd.DataFrame(records, columns=[<span class="string">&quot;Chromosome&quot;</span>, <span class="string">&quot;Position&quot;</span>, <span class="string">&quot;ID&quot;</span>, <span class="string">&quot;Reference&quot;</span>, <span class="string">&quot;Alternate&quot;</span>, <span class="string">&quot;Quality&quot;</span>, <span class="string">&quot;Filter&quot;</span>, <span class="string">&quot;Info&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_vcf_data</span>(<span class="params">vcf1_df, vcf2_df</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;合并两个 VCF DataFrame，并返回不同的记录&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 合并相同的 Chromosome 和 Position 列</span></span><br><span class="line">    merged_df = pd.merge(vcf1_df, vcf2_df, on=[<span class="string">&quot;Chromosome&quot;</span>, <span class="string">&quot;Position&quot;</span>], how=<span class="string">&quot;inner&quot;</span>, indicator=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取共有的 Chromosome 和 Position 列</span></span><br><span class="line">    common_positions = merged_df[[<span class="string">&#x27;Chromosome&#x27;</span>, <span class="string">&#x27;Position&#x27;</span>]]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;共有的 Chromosome 和 Position 数量: <span class="subst">&#123;common_positions.shape[<span class="number">0</span>]&#125;</span>&quot;</span>)  <span class="comment"># 输出共有的位点数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取包含这些位置的原始 VCF 数据</span></span><br><span class="line">    vcf1_common = vcf1_df.merge(common_positions, on=[<span class="string">&quot;Chromosome&quot;</span>, <span class="string">&quot;Position&quot;</span>])</span><br><span class="line">    vcf2_common = vcf2_df.merge(common_positions, on=[<span class="string">&quot;Chromosome&quot;</span>, <span class="string">&quot;Position&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并两个 VCF 文件，保留不同的行</span></span><br><span class="line">    differences_df = pd.merge(vcf1_common, vcf2_common, on=[<span class="string">&quot;Chromosome&quot;</span>, <span class="string">&quot;Position&quot;</span>, <span class="string">&quot;ID&quot;</span>, <span class="string">&quot;Reference&quot;</span>, <span class="string">&quot;Alternate&quot;</span>, <span class="string">&quot;Quality&quot;</span>], how=<span class="string">&quot;outer&quot;</span>, indicator=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取仅在 VCF1 和 VCF2 中存在的行</span></span><br><span class="line">    vcf1_only = differences_df[differences_df[<span class="string">&#x27;_merge&#x27;</span>] == <span class="string">&#x27;left_only&#x27;</span>].drop(columns=[<span class="string">&#x27;_merge&#x27;</span>])</span><br><span class="line">    vcf2_only = differences_df[differences_df[<span class="string">&#x27;_merge&#x27;</span>] == <span class="string">&#x27;right_only&#x27;</span>].drop(columns=[<span class="string">&#x27;_merge&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> vcf1_only, vcf2_only</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_results</span>(<span class="params">vcf1_diff, vcf2_diff, vcf1_file, vcf2_file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;保存比较结果到文件&quot;&quot;&quot;</span></span><br><span class="line">    vcf1_diff.to_csv(<span class="string">f&quot;<span class="subst">&#123;vcf1_file&#125;</span>_only_differences.csv&quot;</span>, index=<span class="literal">False</span>, sep=<span class="string">&#x27;\t&#x27;</span>)  <span class="comment"># 保存仅在 VCF1 中的差异</span></span><br><span class="line">    vcf2_diff.to_csv(<span class="string">f&quot;<span class="subst">&#123;vcf2_file&#125;</span>_only_differences.csv&quot;</span>, index=<span class="literal">False</span>, sep=<span class="string">&#x27;\t&#x27;</span>)  <span class="comment"># 保存仅在 VCF2 中的差异</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Differences saved: &#123;&#125; and &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">f&quot;<span class="subst">&#123;vcf1_file&#125;</span>_only_differences.csv&quot;</span>, <span class="string">f&quot;<span class="subst">&#123;vcf2_file&#125;</span>_only_differences.csv&quot;</span>))  <span class="comment"># 输出保存结果的信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    vcf1_file = sys.argv[<span class="number">1</span>]  <span class="comment"># 从命令行获取第一个 VCF 文件路径</span></span><br><span class="line">    vcf2_file = sys.argv[<span class="number">2</span>]  <span class="comment"># 从命令行获取第二个 VCF 文件路径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析 VCF 文件</span></span><br><span class="line">    vcf1_data = parse_vcf(vcf1_file)  <span class="comment"># 解析第一个 VCF 文件</span></span><br><span class="line">    vcf2_data = parse_vcf(vcf2_file)  <span class="comment"># 解析第二个 VCF 文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 比较 VCF 文件并提取不同的记录</span></span><br><span class="line">    vcf1_diff, vcf2_diff = merge_vcf_data(vcf1_data, vcf2_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存结果</span></span><br><span class="line">    save_results(vcf1_diff, vcf2_diff, vcf1_file, vcf2_file)  <span class="comment"># 保存比较结果</span></span><br><span class="line"><span class="comment"># %%</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过上述实验步骤和代码，可以有效分离并注释SNP和INDEL变异位点，并进一步分析它们在控制株高性状中的作用。这种分析有助于定位控制该性状的基因，并为遗传育种提供指导。</p>]]></content>
      
      
      <categories>
          
          <category> 0_转录组分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转录组 </tag>
            
            <tag> 单基因 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据算法课程笔记（一）</title>
      <link href="/onion.github.io/2024/10/bcba7f9ec12d.html"/>
      <url>/onion.github.io/2024/10/bcba7f9ec12d.html</url>
      
        <content type="html"><![CDATA[<p>本学期，我选择了信息工程专业的大数据算法课程。在这门课中，我不仅学习了理论知识，还积极参与了实践操作。为了更好地巩固所学内容，我决定在这里记录一些课堂笔记和问题思考，帮助自己加深理解，也为日后复习提供参考。</p><h3 id="课堂笔记"><a href="#课堂笔记" class="headerlink" title="课堂笔记"></a>课堂笔记</h3><ol><li><p><strong>大数据的定义与特征</strong></p><ul><li>大数据是指在一定时间内，数据量巨大、类型丰富、生成速度快、价值密度低的数据集合。其主要特征包括：<ul><li><strong>体量大</strong>：数据量庞大，通常以TB或PB计量。</li><li><strong>速度快</strong>：数据生成和处理速度迅猛。</li><li><strong>多样性</strong>：数据来源多样，包括结构化、半结构化和非结构化数据。</li></ul></li></ul></li><li><p><strong>大数据算法的基本概念</strong></p><ul><li>学习了常用的大数据处理算法，如 MapReduce、Spark 等。这些算法帮助我们在海量数据中提取出有价值的信息。</li></ul></li><li><p><strong>数据挖掘与分析</strong></p><ul><li>探讨了数据挖掘的基本流程，包括数据预处理、模型建立、评估与应用。我们还学习了常用的挖掘技术，如分类、聚类和关联规则分析。</li></ul></li></ol><h3 id="问题思考"><a href="#问题思考" class="headerlink" title="问题思考"></a>问题思考</h3><ul><li><p><strong>如何选择合适的算法？</strong><br>  选择算法时需要考虑数据的特性、处理的复杂度以及预期的结果。例如，对于实时数据流，可以选择 Spark Streaming；而对于批量数据处理，MapReduce<a href="_posts/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95/%E5%90%8D%E8%AF%8D%EF%BC%9AMapReduce.md">名词：MapReduce</a> 则更为合适。</p></li><li><p><strong>大数据的隐私与安全问题</strong><br>  在处理大数据时，如何保护用户隐私和数据安全是一个重要课题。我们需要思考如何在不侵犯隐私的前提下，提取和利用数据。</p></li><li><p><strong>未来的研究方向</strong><br>  大数据领域快速发展，未来可能会出现更多创新算法和技术。思考如何结合人工智能与大数据，推动智能决策和自动化分析的发展。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过这门课程的学习，我对大数据算法有了更深入的理解。希望通过不断的笔记和思考，能够将所学知识内化为自己的能力，为未来的学习和职业发展打下坚实的基础。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程笔记 </tag>
            
            <tag> 学习日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用git+hexo+github pages创建个人博客网站（一）</title>
      <link href="/onion.github.io/2024/10/cde2dcd47433.html"/>
      <url>/onion.github.io/2024/10/cde2dcd47433.html</url>
      
        <content type="html"><![CDATA[<p>很多时候，在网络搜索编程相关的信息的时候，发现大家都有自己的博客网站，很是羡慕，也想自己DIY一个自己的博客网站，既作为学习笔记存放的位置，又想在这里创建一个自己的空间，所以拿出几天来学习如何创建个人网站，学习了半亩方塘哥哥的教学，简单易懂，创建了个人网站，很开心，在这里分享一下最新的创建流程。</p><p>那我们开始吧！</p><h1 id="1前置软件安装"><a href="#1前置软件安装" class="headerlink" title="1前置软件安装"></a>1前置软件安装</h1><p>我是使用的window系统，所以下面是window系统的方法，大致步骤如下：<br>0. 有梯子可以上外网Github;(没有也没有关系，可以使用gitee，但是最近好像关闭pages功能了)</p><ol><li>安装git,node;</li><li>注册Github，</li><li>操作一下就可以了；</li></ol><h2 id="1-0梯子部分"><a href="#1-0梯子部分" class="headerlink" title="1.0梯子部分"></a>1.0梯子部分</h2><p>我目前使用的是土星通讯，可以一人注册，多人使用，好像没有流量限制。<br>大家也可以用其他的哦，有什么好的大家可以讨论一下。</p><h2 id="1-1安装git-node"><a href="#1-1安装git-node" class="headerlink" title="1.1安装git,node"></a>1.1安装git,node</h2><p>直接官网安装即可，具体安装操作大家可以自己去google一下qwq：</p><ol><li>git:<a href="https://git-scm.com/downloads">Git - Downloads (git-scm.com)</a></li><li>node:<a href="https://nodejs.cn/download/">下载 | Node.js 中文网 (nodejs.cn)</a></li></ol><h3 id="1-2-注册Github"><a href="#1-2-注册Github" class="headerlink" title="1.2 注册Github"></a>1.2 注册Github</h3><p>也很简单，教程满天飞，就不赘述了，我是使用163邮箱注册的。</p><h3 id="1-3操作一下"><a href="#1-3操作一下" class="headerlink" title="1.3操作一下"></a>1.3操作一下</h3><p>这部分需要慢慢来，不能跳过任何一步哦：</p><h4 id="Github部分"><a href="#Github部分" class="headerlink" title="Github部分"></a>Github部分</h4><p>Github 创建新的库：<br><img src="/onion.github.io/images/%E4%BD%BF%E7%94%A8git+hexo+github%20pages%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%80%EF%BC%89/image-20241016090449790.jpg"><br>写仓库名，格式必须为<code>&lt;用户名&gt;.Github.io</code>（这样可以让Github自行识别），然后在最后点击<code>Create repository</code>。<br><img src="/onion.github.io/images/%E4%BD%BF%E7%94%A8git+hexo+github%20pages%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%80%EF%BC%89/image-20241016092926059.jpg"><br>可以选择Readme文件预先创建，会先有一个文件存在。<br>去Setting里面找到pages选择blande路径，大概整理成下面的样子：<br><img src="/onion.github.io/images/%E4%BD%BF%E7%94%A8git+hexo+github%20pages%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%80%EF%BC%89/image-20241016093013305.jpg"><br><img src="/onion.github.io/images/%E4%BD%BF%E7%94%A8git+hexo+github%20pages%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%80%EF%BC%89/image-20241016093030447.jpg"><br>Github部分就结束了!!!!</p><h4 id="git安装hexo部分"><a href="#git安装hexo部分" class="headerlink" title="git安装hexo部分"></a>git安装hexo部分</h4><p>现在，找一个目录用来保存blog笔记以及其他的配置文件，我也是使用D盘根目录下创建的空文件夹-Myblog。</p><p>然后在文件夹中右键，选择<code> open git bash here</code>，如果是win11的话这个选项可能在显示更多选项里面。</p><p>打开之后是下面这个样子：</p><p><img src="/onion.github.io/images/%E4%BD%BF%E7%94%A8git+hexo+github%20pages%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%80%EF%BC%89/image-20241016093315705.jpg"><br>现在开始运行安装代码了</p><ol><li>全局安装hexo-cli,用于创建hexo项目.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 hexo 框架  </span></span><br><span class="line">npm install -g hexo-cli  </span><br><span class="line"><span class="comment"># 初始化文件夹  </span></span><br><span class="line">hexo init  </span><br><span class="line"><span class="comment"># 安装 hexo 依赖包  </span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li>如果<code>npm install -g hexo-cli</code>命令执行卡住，或者报错连接不上，可以尝试换源。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 npm 源  </span></span><br><span class="line">npm config get registry  </span><br><span class="line"><span class="comment"># 临时修改 npm 源安装 hexo (仅本条命令有效)  </span></span><br><span class="line">npm --registry=https://registry.npm.taobao.org install -g hexo-cli  </span><br><span class="line"><span class="comment"># 或者永久修改 npm 源  </span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li>如果没有问题，那直接就可以查看效果了：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新博客命令</span></span><br><span class="line">npx hexo generate</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d <span class="comment"># 上传到git版本</span></span><br></pre></td></tr></table></figure>此时，打开浏览器，输入网址<code>http://localhost:4000/</code>，就可以看到我们 Hexo 搭建的博客示例了。此时是默认主题，比较简洁。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客网站创建及使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么要写博客？</title>
      <link href="/onion.github.io/2024/10/0f7c51d02647.html"/>
      <url>/onion.github.io/2024/10/0f7c51d02647.html</url>
      
        <content type="html"><![CDATA[<p>按照半亩方塘哥哥的教程，我成功搭建了自己的网站。最初的设想是将其打造成一个不可磨灭的笔记本，汇总我所有的所思所想、所见所得。正如那句古诗所言：“问渠哪得清如许，为有源头活水来。”我希望这个网站能够成为我思想的源泉，让我的灵感不断涌现。</p><p>在这个平台上，我计划定期更新自己在编程之路上遇到的种种弯路与挑战，以及我对各种感兴趣事物的探索与思考。这不仅是对我学习过程的记录，也是与他人分享心得与经验的窗口。我相信，每次的分享都能激发新的思考，带来更多的交流。</p><p>我希望通过这个网站，能够坚持不懈地记录我的成长与变化。无论是编程的技巧、项目的心得，还是生活中的点滴感悟，我都会在这里一一记录。我期待着未来的每一次更新，能够为我带来新的启发，也希望读者们能从中获得一些有价值的洞见。</p><p>愿这个网站成为我不断追求知识与成长的见证，也希望它能激励更多的人勇于探索，乐于分享。让我们一起在这条旅程中，相互学习，共同进步！</p>]]></content>
      
      
      <categories>
          
          <category> 所思随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
